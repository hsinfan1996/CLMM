Measure a Profile
=================

Note
----

All functions in this section can be used passing the explicit arguments
but are also internal functions of the cluster object, and should be
used as such. They are just explicitely used here for clarity.

Ex:

::

   theta, g_t, g_x = compute_tangential_and_cross_components(ra_lens, dec_lens,
                   ra_source, dec_source, shear1, shear2, geometry="flat")

should be done by the user as:

::

   theta, g_t, g_x = cl.compute_tangential_and_cross_components(geometry="flat")

.. code:: ipython3

    import matplotlib.pyplot as plt
    import clmm
    import clmm.dataops
    from clmm.dataops import compute_tangential_and_cross_components, make_radial_profile, make_bins
    from clmm.galaxycluster import GalaxyCluster
    import clmm.utils as u
    from clmm import Cosmology
    from clmm.support import mock_data as mock

Make sure we know which version we’re using

.. code:: ipython3

    clmm.__version__




.. parsed-literal::

    '0.9.0'



Define cosmology object
~~~~~~~~~~~~~~~~~~~~~~~

.. code:: ipython3

    mock_cosmo = Cosmology(H0 = 70.0, Omega_dm0 = 0.27 - 0.045, Omega_b0 = 0.045, Omega_k0 = 0.0)

1. Generate cluster object from mock data
-----------------------------------------

In this example, the mock data includes: shape noise, galaxies drawn
from redshift distribution and photoz errors.

Define toy cluster parameters for mock data generation

.. code:: ipython3

    cosmo = mock_cosmo
    cluster_id = "Awesome_cluster"
    cluster_m = 1.e15
    cluster_z = 0.3
    concentration = 4
    ngals = 1000
    
    zsrc_min = cluster_z + 0.1 # we only want to draw background galaxies
    
    noisy_data_z = mock.generate_galaxy_catalog(cluster_m,
                                                cluster_z,
                                                concentration,
                                                cosmo,
                                                'chang13',
                                                zsrc_min=zsrc_min,
                                                shapenoise=0.005,
                                                photoz_sigma_unscaled=0.05, ngals=ngals)

Loading this into a CLMM cluster object centered on (0,0)

.. code:: ipython3

    cluster_ra = 0.0
    cluster_dec = 0.0
    cl = GalaxyCluster(cluster_id, cluster_ra, cluster_dec, 
                                   cluster_z, noisy_data_z)

2. Load cluster object containing:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Lens properties (ra_l, dec_l, z_l)

..

   Source properties (ra_s, dec_s, e1, e2) ### Note, if loading from
   mock data, use: cl = gc.GalaxyCluster.load(“GC_from_mock_data.pkl”)

.. code:: ipython3

    print("Cluster info = ID:", cl.unique_id, "; ra:", cl.ra,
          "; dec:", cl.dec, "; z_l :", cl.z)
    print("The number of source galaxies is :", len(cl.galcat))


.. parsed-literal::

    Cluster info = ID: Awesome_cluster ; ra: 0.0 ; dec: 0.0 ; z_l : 0.3
    The number of source galaxies is : 1000


2. Basic checks and plots
-------------------------

-  galaxy positions
-  redshift distribution

.. code:: ipython3

    f, ax = plt.subplots(1, 2, figsize=(12, 4))
    
    ax[0].scatter(cl.galcat['ra'], cl.galcat['dec'], color='blue', s=1, alpha=0.3)
    ax[0].plot(cl.ra, cl.dec, 'ro')
    ax[0].set_ylabel('dec', fontsize="large")
    ax[0].set_xlabel('ra', fontsize="large")
    
    hist = ax[1].hist(cl.galcat['z'], bins=40)[0]
    ax[1].axvline(cl.z, c='r', ls='--')
    ax[1].set_xlabel('$z_{source}$', fontsize="large")
    xt = {t:f'{t}' for t in ax[1].get_xticks() if t!=0}
    xt[cl.z] ='$z_{cl}$'
    xto = sorted(list(xt.keys())+[cl.z])
    ax[1].set_xticks(xto)
    ax[1].set_xticklabels(xt[t] for t in xto)
    ax[1].get_xticklabels()[xto.index(cl.z)].set_color('red')
    plt.xlim(0, max(xto))
    plt.show()



.. image:: demo_dataops_functionality_files/demo_dataops_functionality_15_0.png


-  Check ellipticities

.. code:: ipython3

    fig, ax1 = plt.subplots(1, 1)
    
    ax1.scatter(cl.galcat['e1'], cl.galcat['e2'], s=1, alpha=0.2)
    ax1.set_xlabel('e1')
    ax1.set_ylabel('e2')
    ax1.set_aspect('equal', 'datalim')
    ax1.axvline(0, linestyle='dotted', color='black')
    ax1.axhline(0, linestyle='dotted', color='black')




.. parsed-literal::

    <matplotlib.lines.Line2D at 0x7f7c3815ba90>




.. image:: demo_dataops_functionality_files/demo_dataops_functionality_17_1.png


3. Compute and plot shear profiles
----------------------------------

3.1 Compute angular separation, cross and tangential shear for each source galaxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: ipython3

    theta, e_t, e_x = compute_tangential_and_cross_components(
                    ra_lens=cl.ra, dec_lens=cl.dec,
                    ra_source=cl.galcat['ra'], dec_source=cl.galcat['dec'],
                    shear1=cl.galcat['e1'], shear2=cl.galcat['e2'],
                    geometry="flat")

3.1.1 Using ``GalaxyCluster`` object
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

-  You can also call the function directly from the ``GalaxyCluster``
   object
-  By defaut, ``compute_tangential_and_cross_components`` uses columns
   named ``e1`` and ``e2`` of the ``galcat`` table

.. code:: ipython3

    cl.compute_tangential_and_cross_components(geometry="flat", add=True)
    # With the option add the cl object has theta, et and ex new columns 
    # (default: takes in columns named 'e1' and 'e2' and save the results in 'et' and 'ex')
    cl.galcat['et', 'ex'].pprint(max_width=-1)


.. parsed-literal::

              et                    ex          
    --------------------- ----------------------
     0.007534130150382975 -0.0017943879812312947
     0.015905877647851313  -0.005330934957746441
     0.029706323656819113  0.0015555732409390077
     0.026850034387288967   0.008731782968280314
      0.02546486126209768   0.005309662023345453
     0.009876943789676592  -0.003115303631945725
     0.014273255310631366  0.0018895174004578729
      0.01086388986660447  -0.004404349787529535
      0.00661387793712748   -0.00813881836530784
    0.0021409123195616202  -0.004761878362605259
                      ...                    ...
      0.01020521218945195   0.006264001735441694
      0.02238311474883637  -0.010662191550547494
     0.010921323477824825  0.0024067535322919165
      0.01732735518366193   0.006615208399061808
     0.011368258861094358   0.001129557112052689
      0.01560729306801097 -0.0053127224819989605
     0.027538732573297153  -0.004112521786923923
      0.02200219272373451  -0.003420006889595765
     0.011098235455137636 -0.0024351772718620534
    0.0019266590912639908 0.00024381442958512016
     0.025426831464271073 -0.0006983855445332737
    Length = 1000 rows


-  But it’s also possible to choose which columns to use for input and
   output, e.g. Below we’re storing the results in ``e_tan`` and
   ``e_cross`` instead (explicitely taking ``e1`` and ``e2`` as input)

.. code:: ipython3

    cl.compute_tangential_and_cross_components(geometry="flat",
                                                          shape_component1='e1', shape_component2='e2', 
                                                          tan_component='e_tan', cross_component='e_cross',
                                                          add=True)
    cl.galcat['e_tan', 'e_cross'].pprint(max_width=-1)


.. parsed-literal::

            e_tan                e_cross        
    --------------------- ----------------------
     0.007534130150382975 -0.0017943879812312947
     0.015905877647851313  -0.005330934957746441
     0.029706323656819113  0.0015555732409390077
     0.026850034387288967   0.008731782968280314
      0.02546486126209768   0.005309662023345453
     0.009876943789676592  -0.003115303631945725
     0.014273255310631366  0.0018895174004578729
      0.01086388986660447  -0.004404349787529535
      0.00661387793712748   -0.00813881836530784
    0.0021409123195616202  -0.004761878362605259
                      ...                    ...
      0.01020521218945195   0.006264001735441694
      0.02238311474883637  -0.010662191550547494
     0.010921323477824825  0.0024067535322919165
      0.01732735518366193   0.006615208399061808
     0.011368258861094358   0.001129557112052689
      0.01560729306801097 -0.0053127224819989605
     0.027538732573297153  -0.004112521786923923
      0.02200219272373451  -0.003420006889595765
     0.011098235455137636 -0.0024351772718620534
    0.0019266590912639908 0.00024381442958512016
     0.025426831464271073 -0.0006983855445332737
    Length = 1000 rows


Plot tangential and cross ellipticity distributions for verification,
which can be accessed in the galaxy cluster object, cl.

.. code:: ipython3

    f, ax = plt.subplots(1, 2, figsize=(12, 4))
    
    ax[0].hist(cl.galcat['et'],bins=50)
    ax[0].set_xlabel('$\\epsilon_t$',fontsize='xx-large')
    
    ax[1].hist(cl.galcat['ex'],bins=50)
    ax[1].set_xlabel('$\\epsilon_x$',fontsize='xx-large')
    ax[1].set_yscale('log')



.. image:: demo_dataops_functionality_files/demo_dataops_functionality_26_0.png


Compute transversal and cross shear profiles in units defined by user,
using defaults binning

3.2 Compute shear profile in radial bins
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Given the separations in “radians” computed in the previous step, the
user may ask for a binned profile in various projected distance units.
#### 3.2.1 Default binning - default binning using kpc:

.. code:: ipython3

    profiles = make_radial_profile([cl.galcat['et'], cl.galcat['ex'], cl.galcat['z']],
                                        angsep=cl.galcat['theta'], angsep_units="radians",
                                        bin_units="kpc", cosmo=cosmo, z_lens=cl.z)
    profiles.pprint(max_width=-1)
    #profiles.show_in_notebook()


.. parsed-literal::

        radius_min           radius           radius_max             p_0                 p_0_err                   p_1                  p_1_err                p_2               p_2_err        n_src
    ------------------ ------------------ ------------------ -------------------- ---------------------- ----------------------- ---------------------- ------------------ -------------------- -----
    38.684042493913736  346.0702375504305  593.2638336121865   0.0910614869649111     0.0087944366880253    0.001945089577529629  0.0010999776463666013 1.4739009940149157  0.16276755212729527    19
     593.2638336121865   897.408398049349 1147.8436247304594 0.044088028151220975  0.0017114520960357152  -0.0003729367979362693  0.0008223408022023222 1.3180071026007347  0.09196881969490006    40
    1147.8436247304594 1443.7913641225973 1702.4234158487322  0.02745148141474241  0.0009446494193796856   0.0005319306764463273   0.000654978901482461 1.3019420535357407  0.08684848530912148    69
    1702.4234158487322 1995.8770892425684  2257.003206967005 0.020183245584716843   0.000667166591203494  -9.850324665703646e-05 0.00044691853953746877  1.152375061704995 0.057560391362744136   117
     2257.003206967005  2532.907467706876 2811.5829980852777  0.01636750612144683 0.00046197931629980585 -0.00024827425647330943  0.0003783905957351669  1.339075486336563 0.061946124451651714   140
    2811.5829980852777 3098.0490328343526  3366.162789203551 0.012711145361286903 0.00044304778314874216  -7.755648928208432e-05  0.0003531592465670688 1.4200389818471806   0.0673951142241825   166
     3366.162789203551 3635.7736284762027  3920.742580321824 0.010346981935002067  0.0003586803123044414  0.00012062320768171056 0.00034761829300623094 1.2869714479732073 0.051600184568039276   218
     3920.742580321824  4158.952242903296 4475.3223714400965 0.008350040526952533 0.00046390734939012187   0.0005713942944886376  0.0004177698487338078 1.2708593964314194  0.06865879469661901   128
    4475.3223714400965  4731.387198265059  5029.902162558369 0.006597900808778389  0.0005427464859749105  0.00012333049457332075  0.0005631335600941586 1.3231123337689559  0.09029333577728768    75
     5029.902162558369  5258.677348872283  5584.481953676643 0.006245863403193919  0.0008602064084782809   0.0004959590467369729  0.0009607336447407186 1.1404906825367676  0.12042734985679064    28


Note that, because this function bins a generic number of quantities in
the radial profile, its output table names the quantities as ``p_i`` and
errors as ``p_i_err``.

3.1.2 Using ``GalaxyCluster`` object
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The output ``GCData`` corresponding to the binning profiled is attached
as a new attribute of the galaxy cluster object.

.. code:: ipython3

    cl.make_radial_profile("kpc", cosmo=cosmo)
    cl.profile.pprint(max_width=-1)
    #cl.profile.show_in_notebook()


.. parsed-literal::

        radius_min           radius           radius_max              gt                  gt_err                    gx                   gx_err                 z                 z_err         n_src
    ------------------ ------------------ ------------------ -------------------- ---------------------- ----------------------- ---------------------- ------------------ -------------------- -----
    38.684042493913736  346.0702375504305  593.2638336121865   0.0910614869649111     0.0087944366880253    0.001945089577529629  0.0010999776463666013 1.4739009940149157  0.16276755212729527    19
     593.2638336121865   897.408398049349 1147.8436247304594 0.044088028151220975  0.0017114520960357152  -0.0003729367979362693  0.0008223408022023222 1.3180071026007347  0.09196881969490006    40
    1147.8436247304594 1443.7913641225973 1702.4234158487322  0.02745148141474241  0.0009446494193796856   0.0005319306764463273   0.000654978901482461 1.3019420535357407  0.08684848530912148    69
    1702.4234158487322 1995.8770892425684  2257.003206967005 0.020183245584716843   0.000667166591203494  -9.850324665703646e-05 0.00044691853953746877  1.152375061704995 0.057560391362744136   117
     2257.003206967005  2532.907467706876 2811.5829980852777  0.01636750612144683 0.00046197931629980585 -0.00024827425647330943  0.0003783905957351669  1.339075486336563 0.061946124451651714   140
    2811.5829980852777 3098.0490328343526  3366.162789203551 0.012711145361286903 0.00044304778314874216  -7.755648928208432e-05  0.0003531592465670688 1.4200389818471806   0.0673951142241825   166
     3366.162789203551 3635.7736284762027  3920.742580321824 0.010346981935002067  0.0003586803123044414  0.00012062320768171056 0.00034761829300623094 1.2869714479732073 0.051600184568039276   218
     3920.742580321824  4158.952242903296 4475.3223714400965 0.008350040526952533 0.00046390734939012187   0.0005713942944886376  0.0004177698487338078 1.2708593964314194  0.06865879469661901   128
    4475.3223714400965  4731.387198265059  5029.902162558369 0.006597900808778389  0.0005427464859749105  0.00012333049457332075  0.0005631335600941586 1.3231123337689559  0.09029333577728768    75
     5029.902162558369  5258.677348872283  5584.481953676643 0.006245863403193919  0.0008602064084782809   0.0004959590467369729  0.0009607336447407186 1.1404906825367676  0.12042734985679064    28


You can see that this ``profile`` table contains metadata regarding the
comology and bin units

.. code:: ipython3

    print('Cosmology:', cl.profile.meta['cosmo'])
    print('bin units:', cl.profile.meta['bin_units'])


.. parsed-literal::

    Cosmology: AstroPyCosmology(H0=70.0, Omega_dm0=0.22500000000000003, Omega_b0=0.045, Omega_k0=0.0)
    bin units: kpc


Use function to plot the profiles

.. code:: ipython3

    fig, ax = cl.plot_profiles(xscale='log')



.. image:: demo_dataops_functionality_files/demo_dataops_functionality_36_0.png


-  default binning using degrees:

.. code:: ipython3

    new_profiles = cl.make_radial_profile("degrees",cosmo=cosmo)
    fig1, ax1 = cl.plot_profiles()



.. image:: demo_dataops_functionality_files/demo_dataops_functionality_38_0.png


3.2.2 User-defined binning
^^^^^^^^^^^^^^^^^^^^^^^^^^

The users may also provide their own binning, in user-defined units, to
compute the transversal and cross shear profiles. The ``make_bins``
function is provided in ``utils.py`` and allow for various options.

-  e.g., generate 20 bins between 1 and 6 Mpc, linearly spaced.

.. code:: ipython3

    new_bins = make_bins(1, 6, nbins=20, method='evenwidth')
    
    # Make the shear profile in this binning
    new_profiles = cl.make_radial_profile("Mpc",
                                      bins=new_bins, cosmo=cosmo)
    
    fig1, ax1 = cl.plot_profiles()



.. image:: demo_dataops_functionality_files/demo_dataops_functionality_40_0.png


-  e.g., generate 20 bins between 1 and 6 Mpc, evenly spaced in log
   space.

.. code:: ipython3

    new_bins = make_bins(1, 6, nbins=20, method='evenlog10width')
    
    new_profiles = cl.make_radial_profile("Mpc",
                                      bins=new_bins, cosmo=cosmo)
    fig1, ax1 = cl.plot_profiles()
    ax1.set_xscale('log')



.. image:: demo_dataops_functionality_files/demo_dataops_functionality_42_0.png


-  e.g., generate 20 bins between 1 and 6 Mpc, each contaning the same
   number of galaxies

.. code:: ipython3

    # First, convert the source separation table to Mpc
    seps = u.convert_units(cl.galcat["theta"], "radians", "Mpc", redshift=cl.z, cosmo=cosmo)
    
    new_bins = make_bins(1, 6, nbins=20, method='equaloccupation', source_seps=seps)
    new_profiles = cl.make_radial_profile("Mpc",bins=new_bins, cosmo=cosmo)
    
    print(f"number of galaxies in each bin: {list(cl.profile['n_src'])}")
    fig1, ax1 = cl.plot_profiles()


.. parsed-literal::

    number of galaxies in each bin: [48, 48, 47, 48, 47, 48, 47, 48, 47, 48, 48, 47, 48, 47, 48, 47, 48, 47, 48, 48]



.. image:: demo_dataops_functionality_files/demo_dataops_functionality_44_1.png


3.2.3 Other individual profile quantities may also be accessed
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: ipython3

    plt.title('Average redshift in radial bins')
    plt.errorbar(new_profiles['radius'], new_profiles['z'],
                 new_profiles['z_err'], marker = 'o')
    plt.axhline(cl.z, linestyle='dotted', color='r')
    plt.text(1, cl.z*1.1, '$z_{cl}$', color='r')
    plt.xlabel("Radius [Mpc]")
    plt.ylabel('$\langle z\\rangle$')
    plt.show()



.. image:: demo_dataops_functionality_files/demo_dataops_functionality_46_0.png


4. Focus on some options
------------------------

4.1. ``gal_ids_in_bins`` option
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

adds a ``gal_id`` field to the profile GCData. For each bin of the
profile, this is filled with the list of galaxy IDs for the galaxies
that have fallen in that bin.

.. code:: ipython3

    cl.make_radial_profile("Mpc", cosmo=cosmo, gal_ids_in_bins=True)
    cl.profile[:2].pprint(max_width=-1)
    #cl.profile[:2].show_in_notebook()


.. parsed-literal::

         radius_min           radius           radius_max              gt                  gt_err                  gx                   gx_err                z                 z_err        n_src                                                                                                  gal_id                                                                                                
    ------------------- ------------------ ------------------ -------------------- --------------------- ---------------------- --------------------- ------------------ ------------------- ----- -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    0.03868404249391374 0.3460702375504304 0.5932638336121866   0.0910614869649111    0.0087944366880253   0.001945089577529629 0.0010999776463666013 1.4739009940149157 0.16276755212729527    19                                                                                                          [93, 100, 135, 232, 250, 274, 318, 336, 358, 453, 536, 596, 607, 652, 661, 676, 757, 773, 965]
     0.5932638336121866 0.8974083980493491 1.1478436247304593 0.044088028151220975 0.0017114520960357152 -0.0003729367979362693 0.0008223408022023222 1.3180071026007347 0.09196881969490006    40 [35, 166, 184, 199, 201, 315, 379, 383, 387, 395, 406, 452, 481, 492, 515, 517, 522, 548, 553, 575, 600, 642, 645, 654, 671, 677, 756, 782, 797, 855, 867, 894, 914, 923, 926, 930, 947, 961, 967, 980]


.. code:: ipython3

    # Here the list of galaxy IDs that are in the first bin of the tangential shear profile
    import numpy as np
    gal_list = cl.profile['gal_id'][0]
    print(gal_list)


.. parsed-literal::

    [93, 100, 135, 232, 250, 274, 318, 336, 358, 453, 536, 596, 607, 652, 661, 676, 757, 773, 965]


4.2. User-defined naming scheme
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The user may specify which columns to use from the ``galcat`` table to
perform the binned average. If none is specified, the code looks for
columns names ``et`` and ``ex``. Below, we average in bins the
columns\ ``e_tan`` and ``e_cross`` of ``galcat`` and store the results
in the columns ``g_tan`` and ``g_cross`` of the ``profile`` table of the
cluster object.

.. code:: ipython3

    cl.make_radial_profile("kpc", cosmo=cosmo, 
                           tan_component_in='e_tan', cross_component_in='e_cross',
                           tan_component_out='g_tan', cross_component_out='g_cross');
    cl.profile.pprint(max_width=-1)
    #cl.profile.show_in_notebook()


.. parsed-literal::

        radius_min           radius           radius_max            g_tan               g_tan_err                g_cross              g_cross_err               z                 z_err         n_src
    ------------------ ------------------ ------------------ -------------------- ---------------------- ----------------------- ---------------------- ------------------ -------------------- -----
    38.684042493913736  346.0702375504305  593.2638336121865   0.0910614869649111     0.0087944366880253    0.001945089577529629  0.0010999776463666013 1.4739009940149157  0.16276755212729527    19
     593.2638336121865   897.408398049349 1147.8436247304594 0.044088028151220975  0.0017114520960357152  -0.0003729367979362693  0.0008223408022023222 1.3180071026007347  0.09196881969490006    40
    1147.8436247304594 1443.7913641225973 1702.4234158487322  0.02745148141474241  0.0009446494193796856   0.0005319306764463273   0.000654978901482461 1.3019420535357407  0.08684848530912148    69
    1702.4234158487322 1995.8770892425684  2257.003206967005 0.020183245584716843   0.000667166591203494  -9.850324665703646e-05 0.00044691853953746877  1.152375061704995 0.057560391362744136   117
     2257.003206967005  2532.907467706876 2811.5829980852777  0.01636750612144683 0.00046197931629980585 -0.00024827425647330943  0.0003783905957351669  1.339075486336563 0.061946124451651714   140
    2811.5829980852777 3098.0490328343526  3366.162789203551 0.012711145361286903 0.00044304778314874216  -7.755648928208432e-05  0.0003531592465670688 1.4200389818471806   0.0673951142241825   166
     3366.162789203551 3635.7736284762027  3920.742580321824 0.010346981935002067  0.0003586803123044414  0.00012062320768171056 0.00034761829300623094 1.2869714479732073 0.051600184568039276   218
     3920.742580321824  4158.952242903296 4475.3223714400965 0.008350040526952533 0.00046390734939012187   0.0005713942944886376  0.0004177698487338078 1.2708593964314194  0.06865879469661901   128
    4475.3223714400965  4731.387198265059  5029.902162558369 0.006597900808778389  0.0005427464859749105  0.00012333049457332075  0.0005631335600941586 1.3231123337689559  0.09029333577728768    75
     5029.902162558369  5258.677348872283  5584.481953676643 0.006245863403193919  0.0008602064084782809   0.0004959590467369729  0.0009607336447407186 1.1404906825367676  0.12042734985679064    28


The user may also define the name of the output table attribute. Below,
we asked the binned profile to be saved into the
``reduced_shear_profile`` attribute

.. code:: ipython3

    cl.make_radial_profile("kpc", cosmo=cosmo, 
                           tan_component_in='e_tan', cross_component_in='e_cross',
                           tan_component_out='g_tan', cross_component_out='g_cross',
                           table_name='reduced_shear_profile');
    cl.reduced_shear_profile.pprint(max_width=-1)
    #cl.reduced_shear_profile.show_in_notebook()


.. parsed-literal::

        radius_min           radius           radius_max            g_tan               g_tan_err                g_cross              g_cross_err               z                 z_err         n_src
    ------------------ ------------------ ------------------ -------------------- ---------------------- ----------------------- ---------------------- ------------------ -------------------- -----
    38.684042493913736  346.0702375504305  593.2638336121865   0.0910614869649111     0.0087944366880253    0.001945089577529629  0.0010999776463666013 1.4739009940149157  0.16276755212729527    19
     593.2638336121865   897.408398049349 1147.8436247304594 0.044088028151220975  0.0017114520960357152  -0.0003729367979362693  0.0008223408022023222 1.3180071026007347  0.09196881969490006    40
    1147.8436247304594 1443.7913641225973 1702.4234158487322  0.02745148141474241  0.0009446494193796856   0.0005319306764463273   0.000654978901482461 1.3019420535357407  0.08684848530912148    69
    1702.4234158487322 1995.8770892425684  2257.003206967005 0.020183245584716843   0.000667166591203494  -9.850324665703646e-05 0.00044691853953746877  1.152375061704995 0.057560391362744136   117
     2257.003206967005  2532.907467706876 2811.5829980852777  0.01636750612144683 0.00046197931629980585 -0.00024827425647330943  0.0003783905957351669  1.339075486336563 0.061946124451651714   140
    2811.5829980852777 3098.0490328343526  3366.162789203551 0.012711145361286903 0.00044304778314874216  -7.755648928208432e-05  0.0003531592465670688 1.4200389818471806   0.0673951142241825   166
     3366.162789203551 3635.7736284762027  3920.742580321824 0.010346981935002067  0.0003586803123044414  0.00012062320768171056 0.00034761829300623094 1.2869714479732073 0.051600184568039276   218
     3920.742580321824  4158.952242903296 4475.3223714400965 0.008350040526952533 0.00046390734939012187   0.0005713942944886376  0.0004177698487338078 1.2708593964314194  0.06865879469661901   128
    4475.3223714400965  4731.387198265059  5029.902162558369 0.006597900808778389  0.0005427464859749105  0.00012333049457332075  0.0005631335600941586 1.3231123337689559  0.09029333577728768    75
     5029.902162558369  5258.677348872283  5584.481953676643 0.006245863403193919  0.0008602064084782809   0.0004959590467369729  0.0009607336447407186 1.1404906825367676  0.12042734985679064    28


4.3 Compute a DeltaSigma profile instead of a shear profile
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``is_deltasigma`` option allows the user to return a cross and
tangential :math:`\Delta\Sigma` (excess surface density) value for each
galaxy in the catalog, provided ``galcat`` contains the redshifts of the
galaxies and provided a cosmology is passed to the function. The columns
``DeltaSigma_tan`` and ``DeltaSigma_cross`` are added to the ``galcat``
table.

.. code:: ipython3

    cl.compute_tangential_and_cross_components(geometry="flat",
                                                          shape_component1='e1', shape_component2='e2', 
                                                          tan_component='DeltaSigma_tan', cross_component='DeltaSigma_cross',
                                                          add=True, cosmo=cosmo, is_deltasigma=True)
    cl




.. parsed-literal::

    GalaxyCluster Awesome_cluster: (ra=0.0, dec=0.0) at z=0.3
    > 1000 source galaxies
    > With columns: ra dec e1 e2 z ztrue pzbins pzpdf id theta et ex e_tan e_cross sigma_c DeltaSigma_tan DeltaSigma_cross



Because this operation required a Cosmology, it was added to ``galcat``
metadata:

.. code:: ipython3

    cl.galcat.meta['cosmo']




.. parsed-literal::

    'AstroPyCosmology(H0=70.0, Omega_dm0=0.22500000000000003, Omega_b0=0.045, Omega_k0=0.0)'



The binned profile is obtained, as before. Below, we use the values
obtained from the previous step to compute the binned profile. The
latter is saved in a new ``DeltaSigma_profile`` table of the
GalaxyCluster object.

.. code:: ipython3

    
    cl.make_radial_profile("Mpc", cosmo=cosmo, 
                           tan_component_in='DeltaSigma_tan', cross_component_in='DeltaSigma_cross',
                           tan_component_out='DeltaSigma_tan', cross_component_out='DeltaSigma_cross',
                           table_name='DeltaSigma_profile').pprint(max_width=-1)
    
    # cl.make_radial_profile("Mpc", cosmo=cosmo, 
    #                        tan_component_in='DeltaSigma_tan', cross_component_in='DeltaSigma_cross',
    #                        tan_component_out='DeltaSigma_tan', cross_component_out='DeltaSigma_cross',
    #                        table_name='DeltaSigma_profile').show_in_notebook()


.. parsed-literal::

         radius_min           radius           radius_max       DeltaSigma_tan   DeltaSigma_tan_err   DeltaSigma_cross  DeltaSigma_cross_err         z                 z_err         n_src
    ------------------- ------------------ ------------------ ------------------ ------------------ ------------------- -------------------- ------------------ -------------------- -----
    0.03868404249391374 0.3460702375504304 0.5932638336121866 238934230542086.47  20021068494741.44    4906507296502.82    2854426336513.178 1.4739009940149157  0.16276755212729527    19
     0.5932638336121866 0.8974083980493491 1.1478436247304593 123400161598052.33 4112666039978.7236 -1006914457522.2725   2537141258378.5327 1.3180071026007347  0.09196881969490006    40
     1.1478436247304593 1.4437913641225975 1.7024234158487321  78705765205314.53 2144102945567.9026   782503166420.8196   2078633900940.9375 1.3019420535357407  0.08684848530912148    69
     1.7024234158487321 1.9958770892425683  2.257003206967005  60081398043718.03 1648367442957.0066  -811641808855.2207   1457532796228.7607  1.152375061704995 0.057560391362744136   117
      2.257003206967005  2.532907467706879 2.8115829980852776  47579782661534.86  1574956691667.126  -766010672630.3198    1159861413337.845  1.339075486336563 0.061946124451651714   140
     2.8115829980852776 3.0980490328343526 3.3661627892035506  35650685880571.28 1341232760605.9927 -460468466305.70734   1080248923387.5077 1.4200389818471806   0.0673951142241825   166
     3.3661627892035506 3.6357736284762066 3.9207425803218237 30590235945815.734 1323875512278.7212 -1178039846709.4167   2352919444108.8975 1.2869714479732073 0.051600184568039276   218
     3.9207425803218237  4.158952242903293  4.475322371440097  24811648829539.83 1692973367311.7466  2122871961665.7842   1448068509510.0425 1.2708593964314194  0.06865879469661901   128
      4.475322371440097   4.73138719826506  5.029902162558369  17834056922547.84  1540074250442.326 -1503299953400.7869   2320026231042.3613 1.3231123337689559  0.09029333577728768    75
      5.029902162558369  5.258677348872282  5.584481953676643 15814682104240.318  5254885748479.464   7641165821399.373    6798786059586.897 1.1404906825367676  0.12042734985679064    28


.. code:: ipython3

    cl.DeltaSigma_profile.pprint(max_width=-1)
    #cl.DeltaSigma_profile.show_in_notebook()


.. parsed-literal::

         radius_min           radius           radius_max       DeltaSigma_tan   DeltaSigma_tan_err   DeltaSigma_cross  DeltaSigma_cross_err         z                 z_err         n_src
    ------------------- ------------------ ------------------ ------------------ ------------------ ------------------- -------------------- ------------------ -------------------- -----
    0.03868404249391374 0.3460702375504304 0.5932638336121866 238934230542086.47  20021068494741.44    4906507296502.82    2854426336513.178 1.4739009940149157  0.16276755212729527    19
     0.5932638336121866 0.8974083980493491 1.1478436247304593 123400161598052.33 4112666039978.7236 -1006914457522.2725   2537141258378.5327 1.3180071026007347  0.09196881969490006    40
     1.1478436247304593 1.4437913641225975 1.7024234158487321  78705765205314.53 2144102945567.9026   782503166420.8196   2078633900940.9375 1.3019420535357407  0.08684848530912148    69
     1.7024234158487321 1.9958770892425683  2.257003206967005  60081398043718.03 1648367442957.0066  -811641808855.2207   1457532796228.7607  1.152375061704995 0.057560391362744136   117
      2.257003206967005  2.532907467706879 2.8115829980852776  47579782661534.86  1574956691667.126  -766010672630.3198    1159861413337.845  1.339075486336563 0.061946124451651714   140
     2.8115829980852776 3.0980490328343526 3.3661627892035506  35650685880571.28 1341232760605.9927 -460468466305.70734   1080248923387.5077 1.4200389818471806   0.0673951142241825   166
     3.3661627892035506 3.6357736284762066 3.9207425803218237 30590235945815.734 1323875512278.7212 -1178039846709.4167   2352919444108.8975 1.2869714479732073 0.051600184568039276   218
     3.9207425803218237  4.158952242903293  4.475322371440097  24811648829539.83 1692973367311.7466  2122871961665.7842   1448068509510.0425 1.2708593964314194  0.06865879469661901   128
      4.475322371440097   4.73138719826506  5.029902162558369  17834056922547.84  1540074250442.326 -1503299953400.7869   2320026231042.3613 1.3231123337689559  0.09029333577728768    75
      5.029902162558369  5.258677348872282  5.584481953676643 15814682104240.318  5254885748479.464   7641165821399.373    6798786059586.897 1.1404906825367676  0.12042734985679064    28


.. code:: ipython3

    plt.errorbar(cl.DeltaSigma_profile['radius'], cl.DeltaSigma_profile['DeltaSigma_tan'],
                 cl.DeltaSigma_profile['DeltaSigma_tan_err'], marker = 'o')
    plt.title('DeltaSigma profile')
    plt.xlabel("Radius [Mpc]")
    plt.ylabel('$\Delta\Sigma [M_\odot\; Mpc^{-2}]$')
    plt.show()



.. image:: demo_dataops_functionality_files/demo_dataops_functionality_61_0.png

