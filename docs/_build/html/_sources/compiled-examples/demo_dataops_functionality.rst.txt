Measure a Profile
=================

Note
----

All functions in this section can be used passing the explicit arguments
but are also internal functions of the cluster object, and should be
used as such. They are just explicitely used here for clarity.

Ex:

::

   theta, g_t, g_x = compute_tangential_and_cross_components(ra_lens, dec_lens,
                   ra_source, dec_source, shear1, shear2, geometry="flat")

should be done by the user as:

::

   theta, g_t, g_x = cl.compute_tangential_and_cross_components(geometry="flat")

.. code:: ipython3

    import matplotlib.pyplot as plt
    import clmm
    import clmm.dataops
    from clmm.dataops import compute_tangential_and_cross_components, make_radial_profile, make_bins
    from clmm.galaxycluster import GalaxyCluster
    import clmm.utils as u
    from clmm import Cosmology
    from clmm.support import mock_data as mock

Make sure we know which version we’re using

.. code:: ipython3

    clmm.__version__




.. parsed-literal::

    '0.9.1'



Define cosmology object
~~~~~~~~~~~~~~~~~~~~~~~

.. code:: ipython3

    mock_cosmo = Cosmology(H0 = 70.0, Omega_dm0 = 0.27 - 0.045, Omega_b0 = 0.045, Omega_k0 = 0.0)

1. Generate cluster object from mock data
-----------------------------------------

In this example, the mock data includes: shape noise, galaxies drawn
from redshift distribution and photoz errors.

Define toy cluster parameters for mock data generation

.. code:: ipython3

    cosmo = mock_cosmo
    cluster_id = "Awesome_cluster"
    cluster_m = 1.e15
    cluster_z = 0.3
    concentration = 4
    ngals = 1000
    
    zsrc_min = cluster_z + 0.1 # we only want to draw background galaxies
    
    noisy_data_z = mock.generate_galaxy_catalog(cluster_m,
                                                cluster_z,
                                                concentration,
                                                cosmo,
                                                'chang13',
                                                zsrc_min=zsrc_min,
                                                shapenoise=0.005,
                                                photoz_sigma_unscaled=0.05, ngals=ngals)


.. parsed-literal::

    /pbs/home/c/ccombet/.conda/envs/mydesc2/lib/python3.7/site-packages/numpy/ma/core.py:2832: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      order=order, subok=True, ndmin=ndmin)
    /pbs/home/c/ccombet/.conda/envs/mydesc2/lib/python3.7/site-packages/clmm-0.9.1-py3.7.egg/clmm/cosmology/cluster_toolkit.py:69: UserWarning: Some source redshifts are lower than the cluster redshift. Returning Sigma_crit = np.inf for those galaxies.
    /pbs/home/c/ccombet/.conda/envs/mydesc2/lib/python3.7/site-packages/clmm-0.9.1-py3.7.egg/clmm/cosmology/cluster_toolkit.py:79: RuntimeWarning: divide by zero encountered in true_divide
    /pbs/home/c/ccombet/.conda/envs/mydesc2/lib/python3.7/site-packages/clmm-0.9.1-py3.7.egg/clmm/theory/func_layer.py:354: UserWarning: Some source redshifts are lower than the cluster redshift. kappa = 0 for those galaxies.


Loading this into a CLMM cluster object centered on (0,0)

.. code:: ipython3

    cluster_ra = 0.0
    cluster_dec = 0.0
    cl = GalaxyCluster(cluster_id, cluster_ra, cluster_dec, 
                                   cluster_z, noisy_data_z)

2. Load cluster object containing:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Lens properties (ra_l, dec_l, z_l)

..

   Source properties (ra_s, dec_s, e1, e2) ### Note, if loading from
   mock data, use: cl = gc.GalaxyCluster.load(“GC_from_mock_data.pkl”)

.. code:: ipython3

    print("Cluster info = ID:", cl.unique_id, "; ra:", cl.ra,
          "; dec:", cl.dec, "; z_l :", cl.z)
    print("The number of source galaxies is :", len(cl.galcat))


.. parsed-literal::

    Cluster info = ID: Awesome_cluster ; ra: 0.0 ; dec: 0.0 ; z_l : 0.3
    The number of source galaxies is : 1000


2. Basic checks and plots
-------------------------

-  galaxy positions
-  redshift distribution

.. code:: ipython3

    f, ax = plt.subplots(1, 2, figsize=(12, 4))
    
    ax[0].scatter(cl.galcat['ra'], cl.galcat['dec'], color='blue', s=1, alpha=0.3)
    ax[0].plot(cl.ra, cl.dec, 'ro')
    ax[0].set_ylabel('dec', fontsize="large")
    ax[0].set_xlabel('ra', fontsize="large")
    
    hist = ax[1].hist(cl.galcat['z'], bins=40)[0]
    ax[1].axvline(cl.z, c='r', ls='--')
    ax[1].set_xlabel('$z_{source}$', fontsize="large")
    xt = {t:f'{t}' for t in ax[1].get_xticks() if t!=0}
    xt[cl.z] ='$z_{cl}$'
    xto = sorted(list(xt.keys())+[cl.z])
    ax[1].set_xticks(xto)
    ax[1].set_xticklabels(xt[t] for t in xto)
    ax[1].get_xticklabels()[xto.index(cl.z)].set_color('red')
    plt.xlim(0, max(xto))
    plt.show()



.. image:: demo_dataops_functionality_files/demo_dataops_functionality_15_0.png


-  Check ellipticities

.. code:: ipython3

    fig, ax1 = plt.subplots(1, 1)
    
    ax1.scatter(cl.galcat['e1'], cl.galcat['e2'], s=1, alpha=0.2)
    ax1.set_xlabel('e1')
    ax1.set_ylabel('e2')
    ax1.set_aspect('equal', 'datalim')
    ax1.axvline(0, linestyle='dotted', color='black')
    ax1.axhline(0, linestyle='dotted', color='black')




.. parsed-literal::

    <matplotlib.lines.Line2D at 0x7f08485c7850>




.. image:: demo_dataops_functionality_files/demo_dataops_functionality_17_1.png


3. Compute and plot shear profiles
----------------------------------

3.1 Compute angular separation, cross and tangential shear for each source galaxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: ipython3

    theta, e_t, e_x = compute_tangential_and_cross_components(
                    ra_lens=cl.ra, dec_lens=cl.dec,
                    ra_source=cl.galcat['ra'], dec_source=cl.galcat['dec'],
                    shear1=cl.galcat['e1'], shear2=cl.galcat['e2'],
                    geometry="flat")

3.1.1 Using ``GalaxyCluster`` object
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

-  You can also call the function directly from the ``GalaxyCluster``
   object
-  By defaut, ``compute_tangential_and_cross_components`` uses columns
   named ``e1`` and ``e2`` of the ``galcat`` table

.. code:: ipython3

    cl.compute_tangential_and_cross_components(geometry="flat", add=True)
    # With the option add the cl object has theta, et and ex new columns 
    # (default: takes in columns named 'e1' and 'e2' and save the results in 'et' and 'ex')
    cl.galcat['et', 'ex'].pprint(max_width=-1)


.. parsed-literal::

             et                     ex          
    -------------------- -----------------------
    0.017520502676382724  -0.0033551122967470197
    0.019169138440233505   4.036265754764172e-05
    0.013017171447678125   -0.005096223062586384
     0.01780062705321295   -0.005253817195734286
    0.019787574918986812   0.0039042857752456693
    0.012423463451508042   -0.003444552805905385
     0.00502523135422272   -0.008301620120137312
    0.005750907413623782    0.004628406912947449
    0.010579368399214452     0.00267313444596542
    0.014284655574536866   -0.002852726663573094
                     ...                     ...
     0.01552203453680695   0.0033064860597274907
     0.01527416422828204   0.0001256681106109568
     0.10673005069877148   -0.005636373357630875
    0.019003871935046008    0.006670073289871731
    0.041632627967215265   0.0022301293300245814
    0.007164677979109753 -0.00022724204436712445
    0.009187918012398148   0.0009913449888174298
    0.008973553754686482    0.001955214744111507
     0.01608708327905672   0.0003185534485464214
    0.014096144876881309  0.00011368056371638055
    0.011778033926285084   -0.006184859687680821
    Length = 1000 rows


-  But it’s also possible to choose which columns to use for input and
   output, e.g. Below we’re storing the results in ``e_tan`` and
   ``e_cross`` instead (explicitely taking ``e1`` and ``e2`` as input)

.. code:: ipython3

    cl.compute_tangential_and_cross_components(geometry="flat",
                                                          shape_component1='e1', shape_component2='e2', 
                                                          tan_component='e_tan', cross_component='e_cross',
                                                          add=True)
    cl.galcat['e_tan', 'e_cross'].pprint(max_width=-1)


.. parsed-literal::

           e_tan                 e_cross        
    -------------------- -----------------------
    0.017520502676382724  -0.0033551122967470197
    0.019169138440233505   4.036265754764172e-05
    0.013017171447678125   -0.005096223062586384
     0.01780062705321295   -0.005253817195734286
    0.019787574918986812   0.0039042857752456693
    0.012423463451508042   -0.003444552805905385
     0.00502523135422272   -0.008301620120137312
    0.005750907413623782    0.004628406912947449
    0.010579368399214452     0.00267313444596542
    0.014284655574536866   -0.002852726663573094
                     ...                     ...
     0.01552203453680695   0.0033064860597274907
     0.01527416422828204   0.0001256681106109568
     0.10673005069877148   -0.005636373357630875
    0.019003871935046008    0.006670073289871731
    0.041632627967215265   0.0022301293300245814
    0.007164677979109753 -0.00022724204436712445
    0.009187918012398148   0.0009913449888174298
    0.008973553754686482    0.001955214744111507
     0.01608708327905672   0.0003185534485464214
    0.014096144876881309  0.00011368056371638055
    0.011778033926285084   -0.006184859687680821
    Length = 1000 rows


Plot tangential and cross ellipticity distributions for verification,
which can be accessed in the galaxy cluster object, cl.

.. code:: ipython3

    f, ax = plt.subplots(1, 2, figsize=(12, 4))
    
    ax[0].hist(cl.galcat['et'],bins=50)
    ax[0].set_xlabel('$\\epsilon_t$',fontsize='xx-large')
    
    ax[1].hist(cl.galcat['ex'],bins=50)
    ax[1].set_xlabel('$\\epsilon_x$',fontsize='xx-large')
    ax[1].set_yscale('log')



.. image:: demo_dataops_functionality_files/demo_dataops_functionality_26_0.png


Compute transversal and cross shear profiles in units defined by user,
using defaults binning

3.2 Compute shear profile in radial bins
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Given the separations in “radians” computed in the previous step, the
user may ask for a binned profile in various projected distance units.
#### 3.2.1 Default binning - default binning using kpc:

.. code:: ipython3

    profiles = make_radial_profile([cl.galcat['et'], cl.galcat['ex'], cl.galcat['z']],
                                        angsep=cl.galcat['theta'], angsep_units="radians",
                                        bin_units="kpc", cosmo=cosmo, z_lens=cl.z)
    profiles.pprint(max_width=-1)
    #profiles.show_in_notebook()


.. parsed-literal::

        radius_min           radius           radius_max             p_0                 p_0_err                  p_1                  p_1_err                p_2               p_2_err        n_src
    ------------------ ------------------ ------------------ -------------------- ---------------------- ---------------------- ---------------------- ------------------ -------------------- -----
    164.86511746644936 502.98451398607256  698.9992255461411  0.06587492286949441   0.005095330960918345 -0.0008826706883113559   0.000871967896029873 1.2586075543596096    0.125022242323757    28
     698.9992255461411  996.8655086028912 1233.1333336258328  0.03810700618478708  0.0017031023880636153 -0.0002447910099390454   0.000646217547362871 1.2493596874179491   0.1009787871822944    49
    1233.1333336258328 1509.9782491202707 1767.2674417055246 0.026797983778712967  0.0008515850617392815  0.0008437162613406152  0.0004793184978507647 1.2220408775108553 0.061665688793604595    78
    1767.2674417055246 2032.7433993916718  2301.401549785216 0.019684849022485577  0.0006547642019108699 0.00024460959616729556  0.0004528360799440937 1.3643444600061883  0.07697957090761438   110
     2301.401549785216  2585.675381811875  2835.535657864908 0.014289114053664783  0.0004747729515147948  0.0008449553353257092  0.0004158781479688051 1.2861112331115678  0.06445013026874809   138
     2835.535657864908 3125.7083290187143 3369.6697659445995  0.01246247121865025  0.0004266553260499197 -2.471866346449288e-05 0.00041085246345880146 1.3716216564364705  0.06299490508040485   161
    3369.6697659445995  3635.278705370753  3903.803874024291  0.01027036882956684 0.00037767828405042484  3.338456468230189e-06  0.0003527837356061122 1.3632158664839213  0.05318061463309119   189
     3903.803874024291  4133.069823560059  4437.937982103983 0.007555464142703836  0.0004541448149835145     4.606385953573e-05  0.0004014023015279264 1.1836641795404208  0.04854109490977853   149
     4437.937982103983  4668.446675763841  4972.072090183675 0.008084619013693761  0.0006257890759537462 -0.0010953925897173112  0.0005832935652345889 1.2999397067447829  0.07797980709008819    67
     4972.072090183675  5206.549189093128  5506.206198263366 0.005752970865413421  0.0008867147570375862 -0.0009769042763377016  0.0007355036426332983 1.3850070075638687  0.15197979752815002    31


Note that, because this function bins a generic number of quantities in
the radial profile, its output table names the quantities as ``p_i`` and
errors as ``p_i_err``.

3.1.2 Using ``GalaxyCluster`` object
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The output ``GCData`` corresponding to the binning profiled is attached
as a new attribute of the galaxy cluster object.

.. code:: ipython3

    cl.make_radial_profile("kpc", cosmo=cosmo)
    cl.profile.pprint(max_width=-1)
    #cl.profile.show_in_notebook()


.. parsed-literal::

        radius_min           radius           radius_max              gt                  gt_err                   gx                   gx_err                 z                 z_err         n_src
    ------------------ ------------------ ------------------ -------------------- ---------------------- ---------------------- ---------------------- ------------------ -------------------- -----
    164.86511746644936 502.98451398607256  698.9992255461411  0.06587492286949441   0.005095330960918345 -0.0008826706883113559   0.000871967896029873 1.2586075543596096    0.125022242323757    28
     698.9992255461411  996.8655086028912 1233.1333336258328  0.03810700618478708  0.0017031023880636153 -0.0002447910099390454   0.000646217547362871 1.2493596874179491   0.1009787871822944    49
    1233.1333336258328 1509.9782491202707 1767.2674417055246 0.026797983778712967  0.0008515850617392815  0.0008437162613406152  0.0004793184978507647 1.2220408775108553 0.061665688793604595    78
    1767.2674417055246 2032.7433993916718  2301.401549785216 0.019684849022485577  0.0006547642019108699 0.00024460959616729556  0.0004528360799440937 1.3643444600061883  0.07697957090761438   110
     2301.401549785216  2585.675381811875  2835.535657864908 0.014289114053664783  0.0004747729515147948  0.0008449553353257092  0.0004158781479688051 1.2861112331115678  0.06445013026874809   138
     2835.535657864908 3125.7083290187143 3369.6697659445995  0.01246247121865025  0.0004266553260499197 -2.471866346449288e-05 0.00041085246345880146 1.3716216564364705  0.06299490508040485   161
    3369.6697659445995  3635.278705370753  3903.803874024291  0.01027036882956684 0.00037767828405042484  3.338456468230189e-06  0.0003527837356061122 1.3632158664839213  0.05318061463309119   189
     3903.803874024291  4133.069823560059  4437.937982103983 0.007555464142703836  0.0004541448149835145     4.606385953573e-05  0.0004014023015279264 1.1836641795404208  0.04854109490977853   149
     4437.937982103983  4668.446675763841  4972.072090183675 0.008084619013693761  0.0006257890759537462 -0.0010953925897173112  0.0005832935652345889 1.2999397067447829  0.07797980709008819    67
     4972.072090183675  5206.549189093128  5506.206198263366 0.005752970865413421  0.0008867147570375862 -0.0009769042763377016  0.0007355036426332983 1.3850070075638687  0.15197979752815002    31


You can see that this ``profile`` table contains metadata regarding the
comology and bin units

.. code:: ipython3

    print('Cosmology:', cl.profile.meta['cosmo'])
    print('bin units:', cl.profile.meta['bin_units'])


.. parsed-literal::

    Cosmology: AstroPyCosmology(H0=70.0, Omega_dm0=0.22500000000000003, Omega_b0=0.045, Omega_k0=0.0)
    bin units: kpc


Use function to plot the profiles

.. code:: ipython3

    fig, ax = cl.plot_profiles(xscale='log')



.. image:: demo_dataops_functionality_files/demo_dataops_functionality_36_0.png


-  default binning using degrees:

.. code:: ipython3

    new_profiles = cl.make_radial_profile("degrees",cosmo=cosmo)
    fig1, ax1 = cl.plot_profiles()


.. parsed-literal::

    /pbs/home/c/ccombet/.conda/envs/mydesc2/lib/python3.7/site-packages/clmm-0.9.1-py3.7.egg/clmm/galaxycluster.py:297: UserWarning: overwriting profile table.



.. image:: demo_dataops_functionality_files/demo_dataops_functionality_38_1.png


3.2.2 User-defined binning
^^^^^^^^^^^^^^^^^^^^^^^^^^

The users may also provide their own binning, in user-defined units, to
compute the transversal and cross shear profiles. The ``make_bins``
function is provided in ``utils.py`` and allow for various options.

-  e.g., generate 20 bins between 1 and 6 Mpc, linearly spaced.

.. code:: ipython3

    new_bins = make_bins(1, 6, nbins=20, method='evenwidth')
    
    # Make the shear profile in this binning
    new_profiles = cl.make_radial_profile("Mpc",
                                      bins=new_bins, cosmo=cosmo)
    
    fig1, ax1 = cl.plot_profiles()



.. image:: demo_dataops_functionality_files/demo_dataops_functionality_40_0.png


-  e.g., generate 20 bins between 1 and 6 Mpc, evenly spaced in log
   space.

.. code:: ipython3

    new_bins = make_bins(1, 6, nbins=20, method='evenlog10width')
    
    new_profiles = cl.make_radial_profile("Mpc",
                                      bins=new_bins, cosmo=cosmo)
    fig1, ax1 = cl.plot_profiles()
    ax1.set_xscale('log')



.. image:: demo_dataops_functionality_files/demo_dataops_functionality_42_0.png


-  e.g., generate 20 bins between 1 and 6 Mpc, each contaning the same
   number of galaxies

.. code:: ipython3

    # First, convert the source separation table to Mpc
    seps = u.convert_units(cl.galcat["theta"], "radians", "Mpc", redshift=cl.z, cosmo=cosmo)
    
    new_bins = make_bins(1, 6, nbins=20, method='equaloccupation', source_seps=seps)
    new_profiles = cl.make_radial_profile("Mpc",bins=new_bins, cosmo=cosmo)
    
    print(f"number of galaxies in each bin: {list(cl.profile['n_src'])}")
    fig1, ax1 = cl.plot_profiles()


.. parsed-literal::

    number of galaxies in each bin: [48, 47, 47, 47, 48, 47, 47, 47, 48, 47, 47, 47, 48, 47, 47, 47, 48, 47, 47, 48]



.. image:: demo_dataops_functionality_files/demo_dataops_functionality_44_1.png


3.2.3 Other individual profile quantities may also be accessed
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: ipython3

    plt.title('Average redshift in radial bins')
    plt.errorbar(new_profiles['radius'], new_profiles['z'],
                 new_profiles['z_err'], marker = 'o')
    plt.axhline(cl.z, linestyle='dotted', color='r')
    plt.text(1, cl.z*1.1, '$z_{cl}$', color='r')
    plt.xlabel("Radius [Mpc]")
    plt.ylabel('$\langle z\\rangle$')
    plt.show()



.. image:: demo_dataops_functionality_files/demo_dataops_functionality_46_0.png


4. Focus on some options
------------------------

4.1. ``gal_ids_in_bins`` option
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

adds a ``gal_id`` field to the profile GCData. For each bin of the
profile, this is filled with the list of galaxy IDs for the galaxies
that have fallen in that bin.

.. code:: ipython3

    cl.make_radial_profile("Mpc", cosmo=cosmo, gal_ids_in_bins=True)
    cl.profile[:2].pprint(max_width=-1)
    #cl.profile[:2].show_in_notebook()


.. parsed-literal::

         radius_min           radius           radius_max              gt                 gt_err                  gx                  gx_err                z                z_err        n_src                                                                                                                       gal_id                                                                                                                      
    ------------------- ------------------ ------------------ ------------------- --------------------- ---------------------- -------------------- ------------------ ------------------ ----- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    0.16486511746644936 0.5029845139860725 0.6989992255461409 0.06587492286949441  0.005095330960918345 -0.0008826706883113559 0.000871967896029873 1.2586075543596096  0.125022242323757    28                                                                                                          [28, 36, 98, 127, 147, 196, 225, 266, 277, 327, 337, 501, 537, 589, 635, 672, 709, 731, 756, 759, 829, 843, 876, 894, 952, 980, 981, 991]
     0.6989992255461409 0.9968655086028916 1.2331333336258323 0.03810700618478708 0.0017031023880636153 -0.0002447910099390454 0.000646217547362871 1.2493596874179491 0.1009787871822944    49 [33, 75, 85, 126, 186, 212, 215, 217, 295, 303, 315, 319, 348, 375, 380, 395, 396, 397, 422, 435, 445, 448, 450, 457, 472, 481, 562, 585, 588, 617, 626, 634, 637, 661, 674, 703, 704, 725, 741, 753, 768, 811, 817, 884, 930, 969, 970, 972, 987]


.. code:: ipython3

    # Here the list of galaxy IDs that are in the first bin of the tangential shear profile
    import numpy as np
    gal_list = cl.profile['gal_id'][0]
    print(gal_list)


.. parsed-literal::

    [28, 36, 98, 127, 147, 196, 225, 266, 277, 327, 337, 501, 537, 589, 635, 672, 709, 731, 756, 759, 829, 843, 876, 894, 952, 980, 981, 991]


4.2. User-defined naming scheme
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The user may specify which columns to use from the ``galcat`` table to
perform the binned average. If none is specified, the code looks for
columns names ``et`` and ``ex``. Below, we average in bins the
columns\ ``e_tan`` and ``e_cross`` of ``galcat`` and store the results
in the columns ``g_tan`` and ``g_cross`` of the ``profile`` table of the
cluster object.

.. code:: ipython3

    cl.make_radial_profile("kpc", cosmo=cosmo, 
                           tan_component_in='e_tan', cross_component_in='e_cross',
                           tan_component_out='g_tan', cross_component_out='g_cross');
    cl.profile.pprint(max_width=-1)
    #cl.profile.show_in_notebook()


.. parsed-literal::

        radius_min           radius           radius_max            g_tan               g_tan_err               g_cross              g_cross_err               z                 z_err         n_src
    ------------------ ------------------ ------------------ -------------------- ---------------------- ---------------------- ---------------------- ------------------ -------------------- -----
    164.86511746644936 502.98451398607256  698.9992255461411  0.06587492286949441   0.005095330960918345 -0.0008826706883113559   0.000871967896029873 1.2586075543596096    0.125022242323757    28
     698.9992255461411  996.8655086028912 1233.1333336258328  0.03810700618478708  0.0017031023880636153 -0.0002447910099390454   0.000646217547362871 1.2493596874179491   0.1009787871822944    49
    1233.1333336258328 1509.9782491202707 1767.2674417055246 0.026797983778712967  0.0008515850617392815  0.0008437162613406152  0.0004793184978507647 1.2220408775108553 0.061665688793604595    78
    1767.2674417055246 2032.7433993916718  2301.401549785216 0.019684849022485577  0.0006547642019108699 0.00024460959616729556  0.0004528360799440937 1.3643444600061883  0.07697957090761438   110
     2301.401549785216  2585.675381811875  2835.535657864908 0.014289114053664783  0.0004747729515147948  0.0008449553353257092  0.0004158781479688051 1.2861112331115678  0.06445013026874809   138
     2835.535657864908 3125.7083290187143 3369.6697659445995  0.01246247121865025  0.0004266553260499197 -2.471866346449288e-05 0.00041085246345880146 1.3716216564364705  0.06299490508040485   161
    3369.6697659445995  3635.278705370753  3903.803874024291  0.01027036882956684 0.00037767828405042484  3.338456468230189e-06  0.0003527837356061122 1.3632158664839213  0.05318061463309119   189
     3903.803874024291  4133.069823560059  4437.937982103983 0.007555464142703836  0.0004541448149835145     4.606385953573e-05  0.0004014023015279264 1.1836641795404208  0.04854109490977853   149
     4437.937982103983  4668.446675763841  4972.072090183675 0.008084619013693761  0.0006257890759537462 -0.0010953925897173112  0.0005832935652345889 1.2999397067447829  0.07797980709008819    67
     4972.072090183675  5206.549189093128  5506.206198263366 0.005752970865413421  0.0008867147570375862 -0.0009769042763377016  0.0007355036426332983 1.3850070075638687  0.15197979752815002    31


The user may also define the name of the output table attribute. Below,
we asked the binned profile to be saved into the
``reduced_shear_profile`` attribute

.. code:: ipython3

    cl.make_radial_profile("kpc", cosmo=cosmo, 
                           tan_component_in='e_tan', cross_component_in='e_cross',
                           tan_component_out='g_tan', cross_component_out='g_cross',
                           table_name='reduced_shear_profile');
    cl.reduced_shear_profile.pprint(max_width=-1)
    #cl.reduced_shear_profile.show_in_notebook()


.. parsed-literal::

        radius_min           radius           radius_max            g_tan               g_tan_err               g_cross              g_cross_err               z                 z_err         n_src
    ------------------ ------------------ ------------------ -------------------- ---------------------- ---------------------- ---------------------- ------------------ -------------------- -----
    164.86511746644936 502.98451398607256  698.9992255461411  0.06587492286949441   0.005095330960918345 -0.0008826706883113559   0.000871967896029873 1.2586075543596096    0.125022242323757    28
     698.9992255461411  996.8655086028912 1233.1333336258328  0.03810700618478708  0.0017031023880636153 -0.0002447910099390454   0.000646217547362871 1.2493596874179491   0.1009787871822944    49
    1233.1333336258328 1509.9782491202707 1767.2674417055246 0.026797983778712967  0.0008515850617392815  0.0008437162613406152  0.0004793184978507647 1.2220408775108553 0.061665688793604595    78
    1767.2674417055246 2032.7433993916718  2301.401549785216 0.019684849022485577  0.0006547642019108699 0.00024460959616729556  0.0004528360799440937 1.3643444600061883  0.07697957090761438   110
     2301.401549785216  2585.675381811875  2835.535657864908 0.014289114053664783  0.0004747729515147948  0.0008449553353257092  0.0004158781479688051 1.2861112331115678  0.06445013026874809   138
     2835.535657864908 3125.7083290187143 3369.6697659445995  0.01246247121865025  0.0004266553260499197 -2.471866346449288e-05 0.00041085246345880146 1.3716216564364705  0.06299490508040485   161
    3369.6697659445995  3635.278705370753  3903.803874024291  0.01027036882956684 0.00037767828405042484  3.338456468230189e-06  0.0003527837356061122 1.3632158664839213  0.05318061463309119   189
     3903.803874024291  4133.069823560059  4437.937982103983 0.007555464142703836  0.0004541448149835145     4.606385953573e-05  0.0004014023015279264 1.1836641795404208  0.04854109490977853   149
     4437.937982103983  4668.446675763841  4972.072090183675 0.008084619013693761  0.0006257890759537462 -0.0010953925897173112  0.0005832935652345889 1.2999397067447829  0.07797980709008819    67
     4972.072090183675  5206.549189093128  5506.206198263366 0.005752970865413421  0.0008867147570375862 -0.0009769042763377016  0.0007355036426332983 1.3850070075638687  0.15197979752815002    31


4.3 Compute a DeltaSigma profile instead of a shear profile
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``is_deltasigma`` option allows the user to return a cross and
tangential :math:`\Delta\Sigma` (excess surface density) value for each
galaxy in the catalog, provided ``galcat`` contains the redshifts of the
galaxies and provided a cosmology is passed to the function. The columns
``DeltaSigma_tan`` and ``DeltaSigma_cross`` are added to the ``galcat``
table.

.. code:: ipython3

    cl.compute_tangential_and_cross_components(geometry="flat",
                                                          shape_component1='e1', shape_component2='e2', 
                                                          tan_component='DeltaSigma_tan', cross_component='DeltaSigma_cross',
                                                          add=True, cosmo=cosmo, is_deltasigma=True)
    cl




.. parsed-literal::

    GalaxyCluster Awesome_cluster: (ra=0.0, dec=0.0) at z=0.3
    > 1000 source galaxies
    > With columns: ra dec e1 e2 z ztrue pzbins pzpdf id theta et ex e_tan e_cross sigma_c DeltaSigma_tan DeltaSigma_cross



Because this operation required a Cosmology, it was added to ``galcat``
metadata:

.. code:: ipython3

    cl.galcat.meta['cosmo']




.. parsed-literal::

    'AstroPyCosmology(H0=70.0, Omega_dm0=0.22500000000000003, Omega_b0=0.045, Omega_k0=0.0)'



The binned profile is obtained, as before. Below, we use the values
obtained from the previous step to compute the binned profile. The
latter is saved in a new ``DeltaSigma_profile`` table of the
GalaxyCluster object.

.. code:: ipython3

    cl.make_radial_profile("Mpc", cosmo=cosmo, 
                           tan_component_in='DeltaSigma_tan', cross_component_in='DeltaSigma_cross',
                           tan_component_out='DeltaSigma_tan', cross_component_out='DeltaSigma_cross',
                           table_name='DeltaSigma_profile').pprint(max_width=-1)
    # cl.make_radial_profile("Mpc", cosmo=cosmo, 
    #                        tan_component_in='DeltaSigma_tan', cross_component_in='DeltaSigma_cross',
    #                        tan_component_out='DeltaSigma_tan', cross_component_out='DeltaSigma_cross',
    #                        table_name='DeltaSigma_profile').show_in_notebook()


.. parsed-literal::

         radius_min           radius           radius_max       DeltaSigma_tan   DeltaSigma_tan_err  DeltaSigma_cross  DeltaSigma_cross_err         z                 z_err         n_src
    ------------------- ------------------ ------------------ ------------------ ------------------ ------------------ -------------------- ------------------ -------------------- -----
    0.16486511746644936 0.5029845139860725 0.6989992255461409 188456972746059.16  8597445387738.333 -5049784195482.792   3560546941334.6763 1.2586075543596096    0.125022242323757    28
     0.6989992255461409 0.9968655086028916 1.2331333336258323 108119102885475.02 3298326854850.7183 -1130547035640.265   1863632879936.2463 1.2493596874179491   0.1009787871822944    49
     1.2331333336258323 1.5099782491202698 1.7672674417055239   76749654737589.5 2105376949386.4658 2036557802413.2903   1454322831114.1711 1.2220408775108553 0.061665688793604595    78
     1.7672674417055239  2.032743399391671 2.3014015497852154  56830887718957.93 1937173358403.1577 455651906866.25433    1491504680565.435 1.3643444600061883  0.07697957090761438   110
     2.3014015497852154 2.5856753818118734  2.835535657864907  42634597053178.03  1668196078020.507 1740745842922.3987   1715777314175.8755 1.2861112331115678  0.06445013026874809   138
      2.835535657864907  3.125708329018715 3.3696697659445984  35208132952519.52 1268526544700.5095 -246481263702.0541    1213238054079.362 1.3716216564364705  0.06299490508040485   161
     3.3696697659445984 3.6352787053707534 3.9038038740242897   29360714689137.5 1418591922141.7556 256312794794.46326   1121210627058.3325 1.3632158664839213  0.05318061463309119   189
     3.9038038740242897  4.133069823560064  4.437937982103982 21708757331594.254  1332395767107.508  255954383456.0041    1337882276908.815 1.1836641795404208  0.04854109490977853   149
      4.437937982103982  4.668446675763842  4.972072090183674 23310583497451.242 1983750184666.3843 -2620639657852.583   1904832206810.7146 1.2999397067447829  0.07797980709008819    67
      4.972072090183674  5.206549189093129  5.506206198263365 16253320444837.412 2698807198880.3047 -1937861172442.658    2178687054817.082 1.3850070075638687  0.15197979752815002    31


.. code:: ipython3

    #cl.DeltaSigma_profile.pprint(max_width=-1)
    cl.DeltaSigma_profile.show_in_notebook()




.. raw:: html

    <i>GCData length=10</i>
    <table id="table139673508618576-208461" class="table-striped table-bordered table-condensed">
    <thead><tr><th>idx</th><th>radius_min</th><th>radius</th><th>radius_max</th><th>DeltaSigma_tan</th><th>DeltaSigma_tan_err</th><th>DeltaSigma_cross</th><th>DeltaSigma_cross_err</th><th>z</th><th>z_err</th><th>n_src</th></tr></thead>
    <tr><td>0</td><td>0.16486511746644936</td><td>0.5029845139860725</td><td>0.6989992255461409</td><td>188456972746059.16</td><td>8597445387738.333</td><td>-5049784195482.792</td><td>3560546941334.6763</td><td>1.2586075543596096</td><td>0.125022242323757</td><td>28</td></tr>
    <tr><td>1</td><td>0.6989992255461409</td><td>0.9968655086028916</td><td>1.2331333336258323</td><td>108119102885475.02</td><td>3298326854850.7183</td><td>-1130547035640.265</td><td>1863632879936.2463</td><td>1.2493596874179491</td><td>0.1009787871822944</td><td>49</td></tr>
    <tr><td>2</td><td>1.2331333336258323</td><td>1.5099782491202698</td><td>1.7672674417055239</td><td>76749654737589.5</td><td>2105376949386.4658</td><td>2036557802413.2903</td><td>1454322831114.1711</td><td>1.2220408775108553</td><td>0.061665688793604595</td><td>78</td></tr>
    <tr><td>3</td><td>1.7672674417055239</td><td>2.032743399391671</td><td>2.3014015497852154</td><td>56830887718957.93</td><td>1937173358403.1577</td><td>455651906866.25433</td><td>1491504680565.435</td><td>1.3643444600061883</td><td>0.07697957090761438</td><td>110</td></tr>
    <tr><td>4</td><td>2.3014015497852154</td><td>2.5856753818118734</td><td>2.835535657864907</td><td>42634597053178.03</td><td>1668196078020.507</td><td>1740745842922.3987</td><td>1715777314175.8755</td><td>1.2861112331115678</td><td>0.06445013026874809</td><td>138</td></tr>
    <tr><td>5</td><td>2.835535657864907</td><td>3.125708329018715</td><td>3.3696697659445984</td><td>35208132952519.52</td><td>1268526544700.5095</td><td>-246481263702.0541</td><td>1213238054079.362</td><td>1.3716216564364705</td><td>0.06299490508040485</td><td>161</td></tr>
    <tr><td>6</td><td>3.3696697659445984</td><td>3.6352787053707534</td><td>3.9038038740242897</td><td>29360714689137.5</td><td>1418591922141.7556</td><td>256312794794.46326</td><td>1121210627058.3325</td><td>1.3632158664839213</td><td>0.05318061463309119</td><td>189</td></tr>
    <tr><td>7</td><td>3.9038038740242897</td><td>4.133069823560064</td><td>4.437937982103982</td><td>21708757331594.254</td><td>1332395767107.508</td><td>255954383456.0041</td><td>1337882276908.815</td><td>1.1836641795404208</td><td>0.04854109490977853</td><td>149</td></tr>
    <tr><td>8</td><td>4.437937982103982</td><td>4.668446675763842</td><td>4.972072090183674</td><td>23310583497451.242</td><td>1983750184666.3843</td><td>-2620639657852.583</td><td>1904832206810.7146</td><td>1.2999397067447829</td><td>0.07797980709008819</td><td>67</td></tr>
    <tr><td>9</td><td>4.972072090183674</td><td>5.206549189093129</td><td>5.506206198263365</td><td>16253320444837.412</td><td>2698807198880.3047</td><td>-1937861172442.658</td><td>2178687054817.082</td><td>1.3850070075638687</td><td>0.15197979752815002</td><td>31</td></tr>
    </table><style>table.dataTable {clear: both; width: auto !important; margin: 0 !important;}
    .dataTables_info, .dataTables_length, .dataTables_filter, .dataTables_paginate{
    display: inline-block; margin-right: 1em; }
    .paginate_button { margin-right: 5px; }
    </style>
    <script>
    
    var astropy_sort_num = function(a, b) {
        var a_num = parseFloat(a);
        var b_num = parseFloat(b);
    
        if (isNaN(a_num) && isNaN(b_num))
            return ((a < b) ? -1 : ((a > b) ? 1 : 0));
        else if (!isNaN(a_num) && !isNaN(b_num))
            return ((a_num < b_num) ? -1 : ((a_num > b_num) ? 1 : 0));
        else
            return isNaN(a_num) ? -1 : 1;
    }
    
    require.config({paths: {
        datatables: 'https://cdn.datatables.net/1.10.12/js/jquery.dataTables.min'
    }});
    require(["datatables"], function(){
        console.log("$('#table139673508618576-208461').dataTable()");
    
    jQuery.extend( jQuery.fn.dataTableExt.oSort, {
        "optionalnum-asc": astropy_sort_num,
        "optionalnum-desc": function (a,b) { return -astropy_sort_num(a, b); }
    });
    
        $('#table139673508618576-208461').dataTable({
            order: [],
            pageLength: 50,
            lengthMenu: [[10, 25, 50, 100, 500, 1000, -1], [10, 25, 50, 100, 500, 1000, 'All']],
            pagingType: "full_numbers",
            columnDefs: [{targets: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], type: "optionalnum"}]
        });
    });
    </script>




.. code:: ipython3

    plt.errorbar(cl.DeltaSigma_profile['radius'], cl.DeltaSigma_profile['DeltaSigma_tan'],
                 cl.DeltaSigma_profile['DeltaSigma_tan_err'], marker = 'o')
    plt.title('DeltaSigma profile')
    plt.xlabel("Radius [Mpc]")
    plt.ylabel('$\Delta\Sigma [M_\odot\; Mpc^{-2}]$')
    plt.show()



.. image:: demo_dataops_functionality_files/demo_dataops_functionality_61_0.png

