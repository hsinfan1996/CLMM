Measure a Profile
=================

Note
----

All functions in this section can be used passing the explicit arguments
but are also internal functions of the cluster object, and should be
used as such. They are just explicitely used here for clarity.

Ex:

::

   theta, g_t, g_x = compute_tangential_and_cross_components(ra_lens, dec_lens,
                   ra_source, dec_source, shear1, shear2, geometry="flat")

should be done by the user as:

::

   theta, g_t, g_x = cl.compute_tangential_and_cross_components(geometry="flat")

.. code:: ipython3

    import matplotlib.pyplot as plt
    import clmm
    import clmm.dataops
    from clmm.dataops import compute_tangential_and_cross_components, make_radial_profile, make_bins
    from clmm.galaxycluster import GalaxyCluster
    import clmm.utils as u
    from clmm import Cosmology
    from clmm.support import mock_data as mock

Make sure we know which version we’re using

.. code:: ipython3

    clmm.__version__




.. parsed-literal::

    '0.9.0'



Define cosmology object
~~~~~~~~~~~~~~~~~~~~~~~

.. code:: ipython3

    mock_cosmo = Cosmology(H0 = 70.0, Omega_dm0 = 0.27 - 0.045, Omega_b0 = 0.045, Omega_k0 = 0.0)

1. Generate cluster object from mock data
-----------------------------------------

In this example, the mock data includes: shape noise, galaxies drawn
from redshift distribution and photoz errors.

Define toy cluster parameters for mock data generation

.. code:: ipython3

    cosmo = mock_cosmo
    cluster_id = "Awesome_cluster"
    cluster_m = 1.e15
    cluster_z = 0.3
    concentration = 4
    ngals = 1000
    
    zsrc_min = cluster_z + 0.1 # we only want to draw background galaxies
    
    noisy_data_z = mock.generate_galaxy_catalog(cluster_m,
                                                cluster_z,
                                                concentration,
                                                cosmo,
                                                'chang13',
                                                zsrc_min=zsrc_min,
                                                shapenoise=0.005,
                                                photoz_sigma_unscaled=0.05, ngals=ngals)


.. parsed-literal::

    /home/aguena/miniconda3/envs/clmmenv/lib/python3.9/site-packages/clmm/cosmology/cluster_toolkit.py:69: UserWarning: Some source redshifts are lower than the cluster redshift. Returning Sigma_crit = np.inf for those galaxies.
      warnings.warn(f'Some source redshifts are lower than the cluster redshift. Returning Sigma_crit = np.inf for those galaxies.')
    /home/aguena/miniconda3/envs/clmmenv/lib/python3.9/site-packages/clmm/cosmology/cluster_toolkit.py:79: RuntimeWarning: divide by zero encountered in true_divide
      return clight_pc_s**2/(4.0*np.pi*gnewt_pc3_msun_s2)*1/d_l*np.divide(1., beta_s)*1.0e6
    /home/aguena/miniconda3/envs/clmmenv/lib/python3.9/site-packages/clmm/theory/func_layer.py:354: UserWarning: Some source redshifts are lower than the cluster redshift. kappa = 0 for those galaxies.
      warnings.warn(f'Some source redshifts are lower than the cluster redshift. kappa = 0 for those galaxies.')


Loading this into a CLMM cluster object centered on (0,0)

.. code:: ipython3

    cluster_ra = 0.0
    cluster_dec = 0.0
    cl = GalaxyCluster(cluster_id, cluster_ra, cluster_dec, 
                                   cluster_z, noisy_data_z)

2. Load cluster object containing:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Lens properties (ra_l, dec_l, z_l)

..

   Source properties (ra_s, dec_s, e1, e2) ### Note, if loading from
   mock data, use: > cl = gc.GalaxyCluster.load(“GC_from_mock_data.pkl”)

.. code:: ipython3

    print("Cluster info = ID:", cl.unique_id, "; ra:", cl.ra,
          "; dec:", cl.dec, "; z_l :", cl.z)
    print("The number of source galaxies is :", len(cl.galcat))


.. parsed-literal::

    Cluster info = ID: Awesome_cluster ; ra: 0.0 ; dec: 0.0 ; z_l : 0.3
    The number of source galaxies is : 1000


2. Basic checks and plots
-------------------------

-  galaxy positions
-  redshift distribution

.. code:: ipython3

    f, ax = plt.subplots(1, 2, figsize=(12, 4))
    
    ax[0].scatter(cl.galcat['ra'], cl.galcat['dec'], color='blue', s=1, alpha=0.3)
    ax[0].plot(cl.ra, cl.dec, 'ro')
    ax[0].set_ylabel('dec', fontsize="large")
    ax[0].set_xlabel('ra', fontsize="large")
    
    hist = ax[1].hist(cl.galcat['z'], bins=40)[0]
    ax[1].axvline(cl.z, c='r', ls='--')
    ax[1].set_xlabel('$z_{source}$', fontsize="large")
    xt = {t:f'{t}' for t in ax[1].get_xticks() if t!=0}
    xt[cl.z] ='$z_{cl}$'
    xto = sorted(list(xt.keys())+[cl.z])
    ax[1].set_xticks(xto)
    ax[1].set_xticklabels(xt[t] for t in xto)
    ax[1].get_xticklabels()[xto.index(cl.z)].set_color('red')
    plt.xlim(0, max(xto))
    plt.show()



.. image:: demo_dataops_functionality_files/demo_dataops_functionality_15_0.png


-  Check ellipticities

.. code:: ipython3

    fig, ax1 = plt.subplots(1, 1)
    
    ax1.scatter(cl.galcat['e1'], cl.galcat['e2'], s=1, alpha=0.2)
    ax1.set_xlabel('e1')
    ax1.set_ylabel('e2')
    ax1.set_aspect('equal', 'datalim')
    ax1.axvline(0, linestyle='dotted', color='black')
    ax1.axhline(0, linestyle='dotted', color='black')




.. parsed-literal::

    <matplotlib.lines.Line2D at 0x7f6d8dc6cc40>




.. image:: demo_dataops_functionality_files/demo_dataops_functionality_17_1.png


3. Compute and plot shear profiles
----------------------------------

3.1 Compute angular separation, cross and tangential shear for each source galaxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: ipython3

    theta, e_t, e_x = compute_tangential_and_cross_components(
                    ra_lens=cl.ra, dec_lens=cl.dec,
                    ra_source=cl.galcat['ra'], dec_source=cl.galcat['dec'],
                    shear1=cl.galcat['e1'], shear2=cl.galcat['e2'],
                    geometry="flat")

3.1.1 Using ``GalaxyCluster`` object
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

-  You can also call the function directly from the ``GalaxyCluster``
   object
-  By defaut, ``compute_tangential_and_cross_components`` uses columns
   named ``e1`` and ``e2`` of the ``galcat`` table

.. code:: ipython3

    cl.compute_tangential_and_cross_components(geometry="flat", add=True)
    # With the option add the cl object has theta, et and ex new columns 
    # (default: takes in columns named 'e1' and 'e2' and save the results in 'et' and 'ex')
    cl.galcat['et', 'ex']




.. raw:: html

    <i>GCData length=1000</i>
    <table id="table140108506158656" class="table-striped table-bordered table-condensed">
    <thead><tr><th>et</th><th>ex</th></tr></thead>
    <thead><tr><th>float64</th><th>float64</th></tr></thead>
    <tr><td>0.011432773928778069</td><td>-0.00574968075054683</td></tr>
    <tr><td>0.008609317339480047</td><td>0.0043105817941565955</td></tr>
    <tr><td>0.0006839862457824142</td><td>-0.002616498134732449</td></tr>
    <tr><td>0.017091588463308306</td><td>-0.0046739431197796106</td></tr>
    <tr><td>0.013845635067890983</td><td>0.0025370903240794227</td></tr>
    <tr><td>0.003903463273062596</td><td>-0.0019540168132343235</td></tr>
    <tr><td>0.010492090495962766</td><td>-0.0029414378223216035</td></tr>
    <tr><td>0.008351404155772601</td><td>0.0036238596844586314</td></tr>
    <tr><td>0.016844405666745187</td><td>0.004593856528495097</td></tr>
    <tr><td>0.008294253134922139</td><td>-0.004815720696804626</td></tr>
    <tr><td>...</td><td>...</td></tr>
    <tr><td>0.028525936636745197</td><td>-0.0007054884715206045</td></tr>
    <tr><td>0.005151419588912945</td><td>-0.00280577188202252</td></tr>
    <tr><td>0.009523516002317855</td><td>0.007100233437030668</td></tr>
    <tr><td>0.009751729032630673</td><td>0.008179555736213241</td></tr>
    <tr><td>0.0039069885488810146</td><td>0.007183366505111146</td></tr>
    <tr><td>0.006713960016328274</td><td>-0.0016418367263788523</td></tr>
    <tr><td>0.011999255722141325</td><td>-0.004122457120571941</td></tr>
    <tr><td>-0.0006836680087743095</td><td>0.005558685841138252</td></tr>
    <tr><td>0.016819194840529038</td><td>-0.0033911670453348076</td></tr>
    <tr><td>0.019698339117748803</td><td>-0.002411269782825616</td></tr>
    </table>



-  But it’s also possible to choose which columns to use for input and
   output, e.g. Below we’re storing the results in ``e_tan`` and
   ``e_cross`` instead (explicitely taking ``e1`` and ``e2`` as input)

.. code:: ipython3

    cl.compute_tangential_and_cross_components(geometry="flat",
                                                          shape_component1='e1', shape_component2='e2', 
                                                          tan_component='e_tan', cross_component='e_cross',
                                                          add=True)
    cl.galcat['e_tan', 'e_cross']




.. raw:: html

    <i>GCData length=1000</i>
    <table id="table140108506158416" class="table-striped table-bordered table-condensed">
    <thead><tr><th>e_tan</th><th>e_cross</th></tr></thead>
    <thead><tr><th>float64</th><th>float64</th></tr></thead>
    <tr><td>0.011432773928778069</td><td>-0.00574968075054683</td></tr>
    <tr><td>0.008609317339480047</td><td>0.0043105817941565955</td></tr>
    <tr><td>0.0006839862457824142</td><td>-0.002616498134732449</td></tr>
    <tr><td>0.017091588463308306</td><td>-0.0046739431197796106</td></tr>
    <tr><td>0.013845635067890983</td><td>0.0025370903240794227</td></tr>
    <tr><td>0.003903463273062596</td><td>-0.0019540168132343235</td></tr>
    <tr><td>0.010492090495962766</td><td>-0.0029414378223216035</td></tr>
    <tr><td>0.008351404155772601</td><td>0.0036238596844586314</td></tr>
    <tr><td>0.016844405666745187</td><td>0.004593856528495097</td></tr>
    <tr><td>0.008294253134922139</td><td>-0.004815720696804626</td></tr>
    <tr><td>...</td><td>...</td></tr>
    <tr><td>0.028525936636745197</td><td>-0.0007054884715206045</td></tr>
    <tr><td>0.005151419588912945</td><td>-0.00280577188202252</td></tr>
    <tr><td>0.009523516002317855</td><td>0.007100233437030668</td></tr>
    <tr><td>0.009751729032630673</td><td>0.008179555736213241</td></tr>
    <tr><td>0.0039069885488810146</td><td>0.007183366505111146</td></tr>
    <tr><td>0.006713960016328274</td><td>-0.0016418367263788523</td></tr>
    <tr><td>0.011999255722141325</td><td>-0.004122457120571941</td></tr>
    <tr><td>-0.0006836680087743095</td><td>0.005558685841138252</td></tr>
    <tr><td>0.016819194840529038</td><td>-0.0033911670453348076</td></tr>
    <tr><td>0.019698339117748803</td><td>-0.002411269782825616</td></tr>
    </table>



Plot tangential and cross ellipticity distributions for verification,
which can be accessed in the galaxy cluster object, cl.

.. code:: ipython3

    f, ax = plt.subplots(1, 2, figsize=(12, 4))
    
    ax[0].hist(cl.galcat['et'],bins=50)
    ax[0].set_xlabel('$\\epsilon_t$',fontsize='xx-large')
    
    ax[1].hist(cl.galcat['ex'],bins=50)
    ax[1].set_xlabel('$\\epsilon_x$',fontsize='xx-large')
    ax[1].set_yscale('log')



.. image:: demo_dataops_functionality_files/demo_dataops_functionality_26_0.png


Compute transversal and cross shear profiles in units defined by user,
using defaults binning

3.2 Compute shear profile in radial bins
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Given the separations in “radians” computed in the previous step, the
user may ask for a binned profile in various projected distance units.
#### 3.2.1 Default binning - default binning using kpc:

.. code:: ipython3

    profiles = make_radial_profile([cl.galcat['et'], cl.galcat['ex'], cl.galcat['z']],
                                        angsep=cl.galcat['theta'], angsep_units="radians",
                                        bin_units="kpc", cosmo=cosmo, z_lens=cl.z)
    profiles




.. raw:: html

    <i>GCData length=10</i>
    <table id="table140108505770064" class="table-striped table-bordered table-condensed">
    <thead><tr><th>radius_min</th><th>radius</th><th>radius_max</th><th>p_0</th><th>p_0_err</th><th>p_1</th><th>p_1_err</th><th>p_2</th><th>p_2_err</th><th>n_src</th></tr></thead>
    <thead><tr><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>int64</th></tr></thead>
    <tr><td>200.60540932071655</td><td>518.1150224104886</td><td>741.659724044255</td><td>0.06038980920867956</td><td>0.003922835377109523</td><td>0.0006451099823727825</td><td>0.0008175309536428008</td><td>1.2729546369124334</td><td>0.12352981285797018</td><td>32</td></tr>
    <tr><td>741.659724044255</td><td>1031.8166228920766</td><td>1282.7140387677935</td><td>0.03727100175596463</td><td>0.001599146911354305</td><td>-0.00015626454310791786</td><td>0.000683162479112697</td><td>1.174056134624675</td><td>0.08085756197983947</td><td>51</td></tr>
    <tr><td>1282.7140387677935</td><td>1570.9279941147447</td><td>1823.768353491332</td><td>0.024624433003229907</td><td>0.000938462274162409</td><td>0.0006069752892583489</td><td>0.00046271483618054167</td><td>1.2103900858518837</td><td>0.08914883091060032</td><td>88</td></tr>
    <tr><td>1823.768353491332</td><td>2104.0699223520232</td><td>2364.8226682148706</td><td>0.019280086390781968</td><td>0.0006150913193672534</td><td>-0.0005284083912502738</td><td>0.0004360911151676323</td><td>1.2596509401016993</td><td>0.06372868124648626</td><td>110</td></tr>
    <tr><td>2364.8226682148706</td><td>2648.739795383763</td><td>2905.876982938409</td><td>0.014203796101342432</td><td>0.0005191821700243563</td><td>-0.00023966033666353678</td><td>0.0004303160172796827</td><td>1.28442258185168</td><td>0.06100380671062792</td><td>141</td></tr>
    <tr><td>2905.876982938409</td><td>3193.2999071185473</td><td>3446.9312976619476</td><td>0.01147164171281445</td><td>0.0004658501593078654</td><td>0.0004118994198678867</td><td>0.000363436861792267</td><td>1.165849021932146</td><td>0.04979796570866098</td><td>159</td></tr>
    <tr><td>3446.9312976619476</td><td>3715.4200911800817</td><td>3987.985612385486</td><td>0.00941064654286263</td><td>0.00038498653566056444</td><td>-0.0001770797921975384</td><td>0.00034623100148774066</td><td>1.247383635618925</td><td>0.05230407420146309</td><td>203</td></tr>
    <tr><td>3987.985612385486</td><td>4248.433350835188</td><td>4529.039927109025</td><td>0.008361847924316282</td><td>0.0004585863704313091</td><td>-0.00029707421628736154</td><td>0.00038181982446389314</td><td>1.2902346563657212</td><td>0.0638411055951275</td><td>148</td></tr>
    <tr><td>4529.039927109025</td><td>4783.422495538863</td><td>5070.094241832563</td><td>0.0067983169631498815</td><td>0.000799056846858669</td><td>-0.0003844878697576082</td><td>0.000675092500387853</td><td>1.1427453247874493</td><td>0.09108199411339715</td><td>47</td></tr>
    <tr><td>5070.094241832563</td><td>5316.819386866484</td><td>5611.1485565561015</td><td>0.004574468644739188</td><td>0.001240953045359164</td><td>0.00020425470454911592</td><td>0.0010421632717353957</td><td>1.0316864325035913</td><td>0.1482179825463042</td><td>21</td></tr>
    </table>



Note that, because this function bins a generic number of quantities in
the radial profile, its output table names the quantities as ``p_i`` and
errors as ``p_i_err``.

3.1.2 Using ``GalaxyCluster`` object
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The output ``GCData`` corresponding to the binning profiled is attached
as a new attribute of the galaxy cluster object.

.. code:: ipython3

    cl.make_radial_profile("kpc", cosmo=cosmo)
    cl.profile




.. raw:: html

    <i>GCData length=10</i>
    <table id="table140108505770352" class="table-striped table-bordered table-condensed">
    <thead><tr><th>radius_min</th><th>radius</th><th>radius_max</th><th>gt</th><th>gt_err</th><th>gx</th><th>gx_err</th><th>z</th><th>z_err</th><th>n_src</th></tr></thead>
    <thead><tr><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>int64</th></tr></thead>
    <tr><td>200.60540932071655</td><td>518.1150224104886</td><td>741.659724044255</td><td>0.06038980920867956</td><td>0.003922835377109523</td><td>0.0006451099823727825</td><td>0.0008175309536428008</td><td>1.2729546369124334</td><td>0.12352981285797018</td><td>32</td></tr>
    <tr><td>741.659724044255</td><td>1031.8166228920766</td><td>1282.7140387677935</td><td>0.03727100175596463</td><td>0.001599146911354305</td><td>-0.00015626454310791786</td><td>0.000683162479112697</td><td>1.174056134624675</td><td>0.08085756197983947</td><td>51</td></tr>
    <tr><td>1282.7140387677935</td><td>1570.9279941147447</td><td>1823.768353491332</td><td>0.024624433003229907</td><td>0.000938462274162409</td><td>0.0006069752892583489</td><td>0.00046271483618054167</td><td>1.2103900858518837</td><td>0.08914883091060032</td><td>88</td></tr>
    <tr><td>1823.768353491332</td><td>2104.0699223520232</td><td>2364.8226682148706</td><td>0.019280086390781968</td><td>0.0006150913193672534</td><td>-0.0005284083912502738</td><td>0.0004360911151676323</td><td>1.2596509401016993</td><td>0.06372868124648626</td><td>110</td></tr>
    <tr><td>2364.8226682148706</td><td>2648.739795383763</td><td>2905.876982938409</td><td>0.014203796101342432</td><td>0.0005191821700243563</td><td>-0.00023966033666353678</td><td>0.0004303160172796827</td><td>1.28442258185168</td><td>0.06100380671062792</td><td>141</td></tr>
    <tr><td>2905.876982938409</td><td>3193.2999071185473</td><td>3446.9312976619476</td><td>0.01147164171281445</td><td>0.0004658501593078654</td><td>0.0004118994198678867</td><td>0.000363436861792267</td><td>1.165849021932146</td><td>0.04979796570866098</td><td>159</td></tr>
    <tr><td>3446.9312976619476</td><td>3715.4200911800817</td><td>3987.985612385486</td><td>0.00941064654286263</td><td>0.00038498653566056444</td><td>-0.0001770797921975384</td><td>0.00034623100148774066</td><td>1.247383635618925</td><td>0.05230407420146309</td><td>203</td></tr>
    <tr><td>3987.985612385486</td><td>4248.433350835188</td><td>4529.039927109025</td><td>0.008361847924316282</td><td>0.0004585863704313091</td><td>-0.00029707421628736154</td><td>0.00038181982446389314</td><td>1.2902346563657212</td><td>0.0638411055951275</td><td>148</td></tr>
    <tr><td>4529.039927109025</td><td>4783.422495538863</td><td>5070.094241832563</td><td>0.0067983169631498815</td><td>0.000799056846858669</td><td>-0.0003844878697576082</td><td>0.000675092500387853</td><td>1.1427453247874493</td><td>0.09108199411339715</td><td>47</td></tr>
    <tr><td>5070.094241832563</td><td>5316.819386866484</td><td>5611.1485565561015</td><td>0.004574468644739188</td><td>0.001240953045359164</td><td>0.00020425470454911592</td><td>0.0010421632717353957</td><td>1.0316864325035913</td><td>0.1482179825463042</td><td>21</td></tr>
    </table>



You can see that this ``profile`` table contains metadata regarding the
comology and bin units

.. code:: ipython3

    print('Cosmology:', cl.profile.meta['cosmo'])
    print('bin units:', cl.profile.meta['bin_units'])


.. parsed-literal::

    Cosmology: AstroPyCosmology(H0=70.0, Omega_dm0=0.22500000000000003, Omega_b0=0.045, Omega_k0=0.0)
    bin units: kpc


Use function to plot the profiles

.. code:: ipython3

    fig, ax = cl.plot_profiles(xscale='log')



.. image:: demo_dataops_functionality_files/demo_dataops_functionality_36_0.png


-  default binning using degrees:

.. code:: ipython3

    new_profiles = cl.make_radial_profile("degrees",cosmo=cosmo)
    fig1, ax1 = cl.plot_profiles()


.. parsed-literal::

    /home/aguena/miniconda3/envs/clmmenv/lib/python3.9/site-packages/clmm/galaxycluster.py:297: UserWarning: overwriting profile table.
      warnings.warn(f'overwriting {table_name} table.')



.. image:: demo_dataops_functionality_files/demo_dataops_functionality_38_1.png


3.2.2 User-defined binning
^^^^^^^^^^^^^^^^^^^^^^^^^^

The users may also provide their own binning, in user-defined units, to
compute the transversal and cross shear profiles. The ``make_bins``
function is provided in ``utils.py`` and allow for various options.

-  e.g., generate 20 bins between 1 and 6 Mpc, linearly spaced.

.. code:: ipython3

    new_bins = make_bins(1, 6, nbins=20, method='evenwidth')
    
    # Make the shear profile in this binning
    new_profiles = cl.make_radial_profile("Mpc",
                                      bins=new_bins, cosmo=cosmo)
    
    fig1, ax1 = cl.plot_profiles()



.. image:: demo_dataops_functionality_files/demo_dataops_functionality_40_0.png


-  e.g., generate 20 bins between 1 and 6 Mpc, evenly spaced in log
   space.

.. code:: ipython3

    new_bins = make_bins(1, 6, nbins=20, method='evenlog10width')
    
    new_profiles = cl.make_radial_profile("Mpc",
                                      bins=new_bins, cosmo=cosmo)
    fig1, ax1 = cl.plot_profiles()
    ax1.set_xscale('log')



.. image:: demo_dataops_functionality_files/demo_dataops_functionality_42_0.png


-  e.g., generate 20 bins between 1 and 6 Mpc, each contaning the same
   number of galaxies

.. code:: ipython3

    # First, convert the source separation table to Mpc
    seps = u.convert_units(cl.galcat["theta"], "radians", "Mpc", redshift=cl.z, cosmo=cosmo)
    
    new_bins = make_bins(1, 6, nbins=20, method='equaloccupation', source_seps=seps)
    new_profiles = cl.make_radial_profile("Mpc",bins=new_bins, cosmo=cosmo)
    
    print(f"number of galaxies in each bin: {list(cl.profile['n_src'])}")
    fig1, ax1 = cl.plot_profiles()


.. parsed-literal::

    number of galaxies in each bin: [48, 47, 47, 48, 47, 47, 48, 47, 47, 47, 48, 47, 47, 48, 47, 47, 48, 47, 47, 48]



.. image:: demo_dataops_functionality_files/demo_dataops_functionality_44_1.png


3.2.3 Other individual profile quantities may also be accessed
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: ipython3

    plt.title('Average redshift in radial bins')
    plt.errorbar(new_profiles['radius'], new_profiles['z'],
                 new_profiles['z_err'], marker = 'o')
    plt.axhline(cl.z, linestyle='dotted', color='r')
    plt.text(1, cl.z*1.1, '$z_{cl}$', color='r')
    plt.xlabel("Radius [Mpc]")
    plt.ylabel('$\langle z\\rangle$')
    plt.show()



.. image:: demo_dataops_functionality_files/demo_dataops_functionality_46_0.png


4. Focus on some options
------------------------

4.1. ``gal_ids_in_bins`` option
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

adds a ``gal_id`` field to the profile GCData. For each bin of the
profile, this is filled with the list of galaxy IDs for the galaxies
that have fallen in that bin.

.. code:: ipython3

    cl.make_radial_profile("Mpc", cosmo=cosmo, gal_ids_in_bins=True)
    cl.profile[:2]


.. parsed-literal::

    /home/aguena/miniconda3/envs/clmmenv/lib/python3.9/site-packages/clmm/galaxycluster.py:297: UserWarning: overwriting profile table.
      warnings.warn(f'overwriting {table_name} table.')




.. raw:: html

    <i>GCData length=2</i>
    <table id="table140108505784912" class="table-striped table-bordered table-condensed">
    <thead><tr><th>radius_min</th><th>radius</th><th>radius_max</th><th>gt</th><th>gt_err</th><th>gx</th><th>gx_err</th><th>z</th><th>z_err</th><th>n_src</th><th>gal_id</th></tr></thead>
    <thead><tr><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>int64</th><th>object</th></tr></thead>
    <tr><td>0.20060540932071655</td><td>0.5181150224104885</td><td>0.7416597240442551</td><td>0.06038980920867956</td><td>0.003922835377109523</td><td>0.0006451099823727825</td><td>0.0008175309536428008</td><td>1.2729546369124334</td><td>0.12352981285797018</td><td>32</td><td>[44, 55, 66, 80, 128, 162, 273, 288, 306, 338, 404, 423, 460, 504, 532, 541, 571, 585, 629, 658, 692, 713, 733, 753, 771, 783, 825, 845, 848, 853, 878, 979]</td></tr>
    <tr><td>0.7416597240442551</td><td>1.0318166228920767</td><td>1.2827140387677936</td><td>0.03727100175596463</td><td>0.001599146911354305</td><td>-0.00015626454310791786</td><td>0.000683162479112697</td><td>1.174056134624675</td><td>0.08085756197983947</td><td>51</td><td>[46, 50, 91, 95, 106, 168, 183, 206, 218, 225, 309, 323, 349, 364, 372, 381, 430, 446, 453, 459, 494, 510, 533, 549, 559, 579, 581, 596, 611, 626, 718, 754, 778, 787, 797, 803, 804, 824, 826, 831, 838, 855, 867, 881, 905, 907, 913, 915, 943, 987, 990]</td></tr>
    </table>



.. code:: ipython3

    # Here the list of galaxy IDs that are in the first bin of the tangential shear profile
    import numpy as np
    gal_list = cl.profile['gal_id'][0]
    print(gal_list)


.. parsed-literal::

    [44, 55, 66, 80, 128, 162, 273, 288, 306, 338, 404, 423, 460, 504, 532, 541, 571, 585, 629, 658, 692, 713, 733, 753, 771, 783, 825, 845, 848, 853, 878, 979]


4.2. User-defined naming scheme
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The user may specify which columns to use from the ``galcat`` table to
perform the binned average. If none is specified, the code looks for
columns names ``et`` and ``ex``. Below, we average in bins the
columns\ ``e_tan`` and ``e_cross`` of ``galcat`` and store the results
in the columns ``g_tan`` and ``g_cross`` of the ``profile`` table of the
cluster object.

.. code:: ipython3

    cl.make_radial_profile("kpc", cosmo=cosmo, 
                           tan_component_in='e_tan', cross_component_in='e_cross',
                           tan_component_out='g_tan', cross_component_out='g_cross');
    cl.profile




.. raw:: html

    <i>GCData length=10</i>
    <table id="table140108505257056" class="table-striped table-bordered table-condensed">
    <thead><tr><th>radius_min</th><th>radius</th><th>radius_max</th><th>g_tan</th><th>g_tan_err</th><th>g_cross</th><th>g_cross_err</th><th>z</th><th>z_err</th><th>n_src</th></tr></thead>
    <thead><tr><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>int64</th></tr></thead>
    <tr><td>200.60540932071655</td><td>518.1150224104886</td><td>741.659724044255</td><td>0.06038980920867956</td><td>0.003922835377109523</td><td>0.0006451099823727825</td><td>0.0008175309536428008</td><td>1.2729546369124334</td><td>0.12352981285797018</td><td>32</td></tr>
    <tr><td>741.659724044255</td><td>1031.8166228920766</td><td>1282.7140387677935</td><td>0.03727100175596463</td><td>0.001599146911354305</td><td>-0.00015626454310791786</td><td>0.000683162479112697</td><td>1.174056134624675</td><td>0.08085756197983947</td><td>51</td></tr>
    <tr><td>1282.7140387677935</td><td>1570.9279941147447</td><td>1823.768353491332</td><td>0.024624433003229907</td><td>0.000938462274162409</td><td>0.0006069752892583489</td><td>0.00046271483618054167</td><td>1.2103900858518837</td><td>0.08914883091060032</td><td>88</td></tr>
    <tr><td>1823.768353491332</td><td>2104.0699223520232</td><td>2364.8226682148706</td><td>0.019280086390781968</td><td>0.0006150913193672534</td><td>-0.0005284083912502738</td><td>0.0004360911151676323</td><td>1.2596509401016993</td><td>0.06372868124648626</td><td>110</td></tr>
    <tr><td>2364.8226682148706</td><td>2648.739795383763</td><td>2905.876982938409</td><td>0.014203796101342432</td><td>0.0005191821700243563</td><td>-0.00023966033666353678</td><td>0.0004303160172796827</td><td>1.28442258185168</td><td>0.06100380671062792</td><td>141</td></tr>
    <tr><td>2905.876982938409</td><td>3193.2999071185473</td><td>3446.9312976619476</td><td>0.01147164171281445</td><td>0.0004658501593078654</td><td>0.0004118994198678867</td><td>0.000363436861792267</td><td>1.165849021932146</td><td>0.04979796570866098</td><td>159</td></tr>
    <tr><td>3446.9312976619476</td><td>3715.4200911800817</td><td>3987.985612385486</td><td>0.00941064654286263</td><td>0.00038498653566056444</td><td>-0.0001770797921975384</td><td>0.00034623100148774066</td><td>1.247383635618925</td><td>0.05230407420146309</td><td>203</td></tr>
    <tr><td>3987.985612385486</td><td>4248.433350835188</td><td>4529.039927109025</td><td>0.008361847924316282</td><td>0.0004585863704313091</td><td>-0.00029707421628736154</td><td>0.00038181982446389314</td><td>1.2902346563657212</td><td>0.0638411055951275</td><td>148</td></tr>
    <tr><td>4529.039927109025</td><td>4783.422495538863</td><td>5070.094241832563</td><td>0.0067983169631498815</td><td>0.000799056846858669</td><td>-0.0003844878697576082</td><td>0.000675092500387853</td><td>1.1427453247874493</td><td>0.09108199411339715</td><td>47</td></tr>
    <tr><td>5070.094241832563</td><td>5316.819386866484</td><td>5611.1485565561015</td><td>0.004574468644739188</td><td>0.001240953045359164</td><td>0.00020425470454911592</td><td>0.0010421632717353957</td><td>1.0316864325035913</td><td>0.1482179825463042</td><td>21</td></tr>
    </table>



The user may also define the name of the output table attribute. Below,
we asked the binned profile to be saved into the
``reduced_shear_profile`` attribute

.. code:: ipython3

    cl.make_radial_profile("kpc", cosmo=cosmo, 
                           tan_component_in='e_tan', cross_component_in='e_cross',
                           tan_component_out='g_tan', cross_component_out='g_cross',
                           table_name='reduced_shear_profile');
    cl.reduced_shear_profile




.. raw:: html

    <i>GCData length=10</i>
    <table id="table140108502394384" class="table-striped table-bordered table-condensed">
    <thead><tr><th>radius_min</th><th>radius</th><th>radius_max</th><th>g_tan</th><th>g_tan_err</th><th>g_cross</th><th>g_cross_err</th><th>z</th><th>z_err</th><th>n_src</th></tr></thead>
    <thead><tr><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>int64</th></tr></thead>
    <tr><td>200.60540932071655</td><td>518.1150224104886</td><td>741.659724044255</td><td>0.06038980920867956</td><td>0.003922835377109523</td><td>0.0006451099823727825</td><td>0.0008175309536428008</td><td>1.2729546369124334</td><td>0.12352981285797018</td><td>32</td></tr>
    <tr><td>741.659724044255</td><td>1031.8166228920766</td><td>1282.7140387677935</td><td>0.03727100175596463</td><td>0.001599146911354305</td><td>-0.00015626454310791786</td><td>0.000683162479112697</td><td>1.174056134624675</td><td>0.08085756197983947</td><td>51</td></tr>
    <tr><td>1282.7140387677935</td><td>1570.9279941147447</td><td>1823.768353491332</td><td>0.024624433003229907</td><td>0.000938462274162409</td><td>0.0006069752892583489</td><td>0.00046271483618054167</td><td>1.2103900858518837</td><td>0.08914883091060032</td><td>88</td></tr>
    <tr><td>1823.768353491332</td><td>2104.0699223520232</td><td>2364.8226682148706</td><td>0.019280086390781968</td><td>0.0006150913193672534</td><td>-0.0005284083912502738</td><td>0.0004360911151676323</td><td>1.2596509401016993</td><td>0.06372868124648626</td><td>110</td></tr>
    <tr><td>2364.8226682148706</td><td>2648.739795383763</td><td>2905.876982938409</td><td>0.014203796101342432</td><td>0.0005191821700243563</td><td>-0.00023966033666353678</td><td>0.0004303160172796827</td><td>1.28442258185168</td><td>0.06100380671062792</td><td>141</td></tr>
    <tr><td>2905.876982938409</td><td>3193.2999071185473</td><td>3446.9312976619476</td><td>0.01147164171281445</td><td>0.0004658501593078654</td><td>0.0004118994198678867</td><td>0.000363436861792267</td><td>1.165849021932146</td><td>0.04979796570866098</td><td>159</td></tr>
    <tr><td>3446.9312976619476</td><td>3715.4200911800817</td><td>3987.985612385486</td><td>0.00941064654286263</td><td>0.00038498653566056444</td><td>-0.0001770797921975384</td><td>0.00034623100148774066</td><td>1.247383635618925</td><td>0.05230407420146309</td><td>203</td></tr>
    <tr><td>3987.985612385486</td><td>4248.433350835188</td><td>4529.039927109025</td><td>0.008361847924316282</td><td>0.0004585863704313091</td><td>-0.00029707421628736154</td><td>0.00038181982446389314</td><td>1.2902346563657212</td><td>0.0638411055951275</td><td>148</td></tr>
    <tr><td>4529.039927109025</td><td>4783.422495538863</td><td>5070.094241832563</td><td>0.0067983169631498815</td><td>0.000799056846858669</td><td>-0.0003844878697576082</td><td>0.000675092500387853</td><td>1.1427453247874493</td><td>0.09108199411339715</td><td>47</td></tr>
    <tr><td>5070.094241832563</td><td>5316.819386866484</td><td>5611.1485565561015</td><td>0.004574468644739188</td><td>0.001240953045359164</td><td>0.00020425470454911592</td><td>0.0010421632717353957</td><td>1.0316864325035913</td><td>0.1482179825463042</td><td>21</td></tr>
    </table>



4.3 Compute a DeltaSigma profile instead of a shear profile
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``is_deltasigma`` option allows the user to return a cross and
tangential :math:`\Delta\Sigma` (excess surface density) value for each
galaxy in the catalog, provided ``galcat`` contains the redshifts of the
galaxies and provided a cosmology is passed to the function. The columns
``DeltaSigma_tan`` and ``DeltaSigma_cross`` are added to the ``galcat``
table.

.. code:: ipython3

    cl.compute_tangential_and_cross_components(geometry="flat",
                                                          shape_component1='e1', shape_component2='e2', 
                                                          tan_component='DeltaSigma_tan', cross_component='DeltaSigma_cross',
                                                          add=True, cosmo=cosmo, is_deltasigma=True)
    cl


.. parsed-literal::

    /home/aguena/miniconda3/envs/clmmenv/lib/python3.9/site-packages/clmm/cosmology/cluster_toolkit.py:69: UserWarning: Some source redshifts are lower than the cluster redshift. Returning Sigma_crit = np.inf for those galaxies.
      warnings.warn(f'Some source redshifts are lower than the cluster redshift. Returning Sigma_crit = np.inf for those galaxies.')
    /home/aguena/miniconda3/envs/clmmenv/lib/python3.9/site-packages/clmm/cosmology/cluster_toolkit.py:79: RuntimeWarning: divide by zero encountered in true_divide
      return clight_pc_s**2/(4.0*np.pi*gnewt_pc3_msun_s2)*1/d_l*np.divide(1., beta_s)*1.0e6




.. parsed-literal::

    GalaxyCluster Awesome_cluster: (ra=0.0, dec=0.0) at z=0.3
    > 1000 source galaxies
    > With columns: ra dec e1 e2 z ztrue pzbins pzpdf id theta et ex e_tan e_cross sigma_c DeltaSigma_tan DeltaSigma_cross



Because this operation required a Cosmology, it was added to ``galcat``
metadata:

.. code:: ipython3

    cl.galcat.meta['cosmo']




.. parsed-literal::

    'AstroPyCosmology(H0=70.0, Omega_dm0=0.22500000000000003, Omega_b0=0.045, Omega_k0=0.0)'



The binned profile is obtained, as before. Below, we use the values
obtained from the previous step to compute the binned profile. The
latter is saved in a new ``DeltaSigma_profile`` table of the
GalaxyCluster object.

.. code:: ipython3

    cl.make_radial_profile("Mpc", cosmo=cosmo, 
                           tan_component_in='DeltaSigma_tan', cross_component_in='DeltaSigma_cross',
                           tan_component_out='DeltaSigma_tan', cross_component_out='DeltaSigma_cross',
                           table_name='DeltaSigma_profile')




.. raw:: html

    <i>GCData length=10</i>
    <table id="table140108542441120" class="table-striped table-bordered table-condensed">
    <thead><tr><th>radius_min</th><th>radius</th><th>radius_max</th><th>DeltaSigma_tan</th><th>DeltaSigma_tan_err</th><th>DeltaSigma_cross</th><th>DeltaSigma_cross_err</th><th>z</th><th>z_err</th><th>n_src</th></tr></thead>
    <thead><tr><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>int64</th></tr></thead>
    <tr><td>0.20060540932071655</td><td>0.5181150224104885</td><td>0.7416597240442551</td><td>180540562047702.2</td><td>8617488710678.801</td><td>2352660027022.877</td><td>2815254422467.7847</td><td>1.2729546369124334</td><td>0.12352981285797018</td><td>32</td></tr>
    <tr><td>0.7416597240442551</td><td>1.0318166228920767</td><td>1.2827140387677936</td><td>107713197014445.84</td><td>3443983638341.884</td><td>1455980219207.1033</td><td>2926953911563.572</td><td>1.174056134624675</td><td>0.08085756197983947</td><td>51</td></tr>
    <tr><td>1.2827140387677936</td><td>1.570927994114745</td><td>1.823768353491332</td><td>74416276463667.72</td><td>2314433134612.9775</td><td>1390501089840.562</td><td>1451890535237.3499</td><td>1.2103900858518837</td><td>0.08914883091060032</td><td>88</td></tr>
    <tr><td>1.823768353491332</td><td>2.104069922352026</td><td>2.3648226682148703</td><td>55469218447987.0</td><td>1680566493046.5999</td><td>-1837851445076.3335</td><td>1377027260887.1948</td><td>1.2596509401016993</td><td>0.06372868124648626</td><td>110</td></tr>
    <tr><td>2.3648226682148703</td><td>2.648739795383763</td><td>2.905876982938409</td><td>41335658292308.805</td><td>1756214999432.4937</td><td>-235208714104.43018</td><td>1499038568533.741</td><td>1.28442258185168</td><td>0.06100380671062792</td><td>141</td></tr>
    <tr><td>2.905876982938409</td><td>3.1932999071185466</td><td>3.4469312976619473</td><td>33792177137299.156</td><td>1494562061950.4817</td><td>789198301361.6466</td><td>1494111757840.5242</td><td>1.165849021932146</td><td>0.04979796570866098</td><td>159</td></tr>
    <tr><td>3.4469312976619473</td><td>3.7154200911800803</td><td>3.9879856123854855</td><td>29027886391618.5</td><td>1360201224915.705</td><td>-761399826138.9607</td><td>1431587682259.174</td><td>1.247383635618925</td><td>0.05230407420146309</td><td>203</td></tr>
    <tr><td>3.9879856123854855</td><td>4.248433350835185</td><td>4.529039927109024</td><td>29711799037543.26</td><td>4363236763770.5166</td><td>-6512673254515.866</td><td>4631829965456.819</td><td>1.2902346563657212</td><td>0.0638411055951275</td><td>148</td></tr>
    <tr><td>4.529039927109024</td><td>4.783422495538863</td><td>5.070094241832563</td><td>19725820275875.336</td><td>2190946540621.9985</td><td>-784664059671.9448</td><td>2067015570415.579</td><td>1.1427453247874493</td><td>0.09108199411339715</td><td>47</td></tr>
    <tr><td>5.070094241832563</td><td>5.316819386866485</td><td>5.611148556556102</td><td>23815541983744.734</td><td>10668504539759.068</td><td>14447441838401.191</td><td>14459406372534.05</td><td>1.0316864325035913</td><td>0.1482179825463042</td><td>21</td></tr>
    </table>



.. code:: ipython3

    cl.DeltaSigma_profile




.. raw:: html

    <i>GCData length=10</i>
    <table id="table140108542441120" class="table-striped table-bordered table-condensed">
    <thead><tr><th>radius_min</th><th>radius</th><th>radius_max</th><th>DeltaSigma_tan</th><th>DeltaSigma_tan_err</th><th>DeltaSigma_cross</th><th>DeltaSigma_cross_err</th><th>z</th><th>z_err</th><th>n_src</th></tr></thead>
    <thead><tr><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>int64</th></tr></thead>
    <tr><td>0.20060540932071655</td><td>0.5181150224104885</td><td>0.7416597240442551</td><td>180540562047702.2</td><td>8617488710678.801</td><td>2352660027022.877</td><td>2815254422467.7847</td><td>1.2729546369124334</td><td>0.12352981285797018</td><td>32</td></tr>
    <tr><td>0.7416597240442551</td><td>1.0318166228920767</td><td>1.2827140387677936</td><td>107713197014445.84</td><td>3443983638341.884</td><td>1455980219207.1033</td><td>2926953911563.572</td><td>1.174056134624675</td><td>0.08085756197983947</td><td>51</td></tr>
    <tr><td>1.2827140387677936</td><td>1.570927994114745</td><td>1.823768353491332</td><td>74416276463667.72</td><td>2314433134612.9775</td><td>1390501089840.562</td><td>1451890535237.3499</td><td>1.2103900858518837</td><td>0.08914883091060032</td><td>88</td></tr>
    <tr><td>1.823768353491332</td><td>2.104069922352026</td><td>2.3648226682148703</td><td>55469218447987.0</td><td>1680566493046.5999</td><td>-1837851445076.3335</td><td>1377027260887.1948</td><td>1.2596509401016993</td><td>0.06372868124648626</td><td>110</td></tr>
    <tr><td>2.3648226682148703</td><td>2.648739795383763</td><td>2.905876982938409</td><td>41335658292308.805</td><td>1756214999432.4937</td><td>-235208714104.43018</td><td>1499038568533.741</td><td>1.28442258185168</td><td>0.06100380671062792</td><td>141</td></tr>
    <tr><td>2.905876982938409</td><td>3.1932999071185466</td><td>3.4469312976619473</td><td>33792177137299.156</td><td>1494562061950.4817</td><td>789198301361.6466</td><td>1494111757840.5242</td><td>1.165849021932146</td><td>0.04979796570866098</td><td>159</td></tr>
    <tr><td>3.4469312976619473</td><td>3.7154200911800803</td><td>3.9879856123854855</td><td>29027886391618.5</td><td>1360201224915.705</td><td>-761399826138.9607</td><td>1431587682259.174</td><td>1.247383635618925</td><td>0.05230407420146309</td><td>203</td></tr>
    <tr><td>3.9879856123854855</td><td>4.248433350835185</td><td>4.529039927109024</td><td>29711799037543.26</td><td>4363236763770.5166</td><td>-6512673254515.866</td><td>4631829965456.819</td><td>1.2902346563657212</td><td>0.0638411055951275</td><td>148</td></tr>
    <tr><td>4.529039927109024</td><td>4.783422495538863</td><td>5.070094241832563</td><td>19725820275875.336</td><td>2190946540621.9985</td><td>-784664059671.9448</td><td>2067015570415.579</td><td>1.1427453247874493</td><td>0.09108199411339715</td><td>47</td></tr>
    <tr><td>5.070094241832563</td><td>5.316819386866485</td><td>5.611148556556102</td><td>23815541983744.734</td><td>10668504539759.068</td><td>14447441838401.191</td><td>14459406372534.05</td><td>1.0316864325035913</td><td>0.1482179825463042</td><td>21</td></tr>
    </table>



.. code:: ipython3

    plt.errorbar(cl.DeltaSigma_profile['radius'], cl.DeltaSigma_profile['DeltaSigma_tan'],
                 cl.DeltaSigma_profile['DeltaSigma_tan_err'], marker = 'o')
    plt.title('DeltaSigma profile')
    plt.xlabel("Radius [Mpc]")
    plt.ylabel('$\Delta\Sigma [M_\odot\; Mpc^{-2}]$')
    plt.show()



.. image:: demo_dataops_functionality_files/demo_dataops_functionality_61_0.png

