Generate Mock Data
==================

In this example we generate mock data with a variety of systematic
effects including photometric redshifts, source galaxy distributions,
and shape noise. We then populate a galaxy cluster object. This
notebooks is organised as follows: - Imports and configuration setup -
Generate mock data with different source galaxy options - Generate mock
data with different field-of-view options - Generate mock data with
different galaxy cluster options (only available with the Numcosmo
and/or CCL backends). Use the ``os.environ['CLMM_MODELING_BACKEND']``
line below to select your backend.

.. code:: ipython3

    import os
    ## Uncomment the following line if you want to use a specific modeling backend among 'ct' (cluster-toolkit), 'ccl' (CCL) or 'nc' (Numcosmo). Default is 'ct'
    #os.environ['CLMM_MODELING_BACKEND'] = 'nc'

.. code:: ipython3

    try: import clmm
    except:
        import notebook_install
        notebook_install.install_clmm_pipeline(upgrade=False)
        import clmm
    import numpy as np
    import matplotlib.pyplot as plt
    %matplotlib inline

Make sure we know which version we’re using

.. code:: ipython3

    clmm.__version__




.. parsed-literal::

    '0.8.0'



Import mock data module and setup the configuration
---------------------------------------------------

.. code:: ipython3

    from clmm.support import mock_data as mock
    from clmm import Cosmology

Mock data generation requires a defined cosmology

.. code:: ipython3

    mock_cosmo = Cosmology(H0 = 70.0, Omega_dm0 = 0.27 - 0.045, Omega_b0 = 0.045, Omega_k0 = 0.0)

Mock data generation requires some cluster information. The default is
to work with the NFW profile, using the “200,mean” mass definition. The
Numcosmo and CCL backends allow for more flexibility (see last section
of this notebook)

.. code:: ipython3

    cosmo = mock_cosmo
    cluster_id = "Awesome_cluster"
    cluster_m = 1.e15 # M200,m
    cluster_z = 0.3
    src_z = 0.8
    concentration = 4 
    ngals = 1000 # number of source galaxies
    cluster_ra = 0.0
    cluster_dec = 0.0

Generate the mock catalog with different source galaxy options
--------------------------------------------------------------

-  Clean data: no noise, all galaxies at the same redshift

.. code:: ipython3

    zsrc_min = cluster_z + 0.1 

.. code:: ipython3

    ideal_data = mock.generate_galaxy_catalog(
        cluster_m, cluster_z, concentration, cosmo, src_z, ngals=ngals)

-  Noisy data: shape noise, all galaxies at the same redshift

.. code:: ipython3

    noisy_data_src_z = mock.generate_galaxy_catalog(
        cluster_m, cluster_z, concentration, cosmo, src_z,
        shapenoise=0.05, ngals=ngals)

-  Noisy data: photo-z errors (and pdfs!), all galaxies at the same
   redshift

.. code:: ipython3

    noisy_data_photoz = mock.generate_galaxy_catalog(
        cluster_m, cluster_z, concentration, cosmo, src_z,
        shapenoise=0.05, photoz_sigma_unscaled=0.05, ngals=ngals)

-  Clean data: source galaxy redshifts drawn from Chang et al. 2013, no
   noise

.. code:: ipython3

    ideal_with_src_dist = mock.generate_galaxy_catalog(
        cluster_m, cluster_z, concentration, cosmo, 'chang13', zsrc_min=zsrc_min,
        zsrc_max=7.0, ngals=ngals)


-  Noisy data: galaxies following redshift distribution, redshift error,
   shape noise

.. code:: ipython3

    allsystematics = mock.generate_galaxy_catalog(
        cluster_m, cluster_z, concentration, cosmo, 'chang13', zsrc_min=zsrc_min,
        zsrc_max=7.0, shapenoise=0.05, photoz_sigma_unscaled=0.05, ngals=ngals)

Sanity check: checking that no galaxies were originally drawn below
zsrc_min, before photoz errors are applied (when relevant)

.. code:: ipython3

    print('Number of galaxies below zsrc_min:')
    print('ideal_data:',np.sum(ideal_data['ztrue']<zsrc_min))
    print('noisy_data_src_z:',np.sum(noisy_data_src_z['ztrue']<zsrc_min))
    print('noisy_data_photoz:',np.sum(noisy_data_photoz['ztrue']<zsrc_min))
    print('ideal_with_src_dist:',np.sum(ideal_with_src_dist['ztrue']<zsrc_min))
    print('allsystematics:',np.sum(allsystematics['ztrue']<zsrc_min))


.. parsed-literal::

    Number of galaxies below zsrc_min:
    ideal_data: 0
    noisy_data_src_z: 0
    noisy_data_photoz: 0
    ideal_with_src_dist: 0
    allsystematics: 0


Inspect the catalog data
~~~~~~~~~~~~~~~~~~~~~~~~

-  Ideal catalog first entries: no noise on the shape measurement, all
   galaxies at z=0.8, no redshift errors (z = ztrue)

.. code:: ipython3

    for n in ideal_data.colnames: 
        if n!='id':
            ideal_data[n].format = "%6.3e" 
    ideal_data[0:3].pprint(max_width=-1)


.. parsed-literal::

        ra        dec         e1         e2         z       ztrue    id
    ---------- ---------- ---------- ---------- --------- --------- ---
     2.070e-01 -1.241e-02 -9.833e-03 -1.183e-03 8.000e-01 8.000e-01   0
    -3.229e-02  6.713e-02  1.851e-02 -2.318e-02 8.000e-01 8.000e-01   1
    -1.035e-01  1.507e-01  4.153e-03 -1.078e-02 8.000e-01 8.000e-01   2


-  With photo-z errors

.. code:: ipython3

    for n in noisy_data_photoz.colnames: 
        if n!='id':
            noisy_data_photoz[n].format = "%6.3e"
    noisy_data_photoz[0:3].pprint(max_width=-1)


.. parsed-literal::

        ra        dec         e1         e2         z       ztrue         pzbins [61]             pzpdf [61]        id
    ---------- ---------- ---------- ---------- --------- --------- ----------------------- ---------------------- ---
     2.242e-01  1.358e-01  2.634e-03  3.996e-02 7.516e-01 8.000e-01 -1.484e-01 .. 1.652e+00 8.550e-22 .. 8.550e-22   0
     2.126e-01  3.265e-02 -1.014e-01 -2.158e-02 8.639e-01 8.000e-01 -3.608e-02 .. 1.764e+00 8.550e-22 .. 8.550e-22   1
    -2.130e-01 -1.619e-01 -8.417e-03 -5.663e-03 8.523e-01 8.000e-01 -4.766e-02 .. 1.752e+00 8.550e-22 .. 8.550e-22   2


-  Histogram of the redshift distribution of background galaxies, for
   the true (originally drawn) redshift and the redshift once photoz
   errors have been added. By construction no true redshift occurs below
   zsrc_min, but some ‘observed’ redshifts (i.e. including photoz
   errors) might be.

.. code:: ipython3

    plt.hist(allsystematics['z'], bins=50, alpha=0.3, label='measured z (i.e. including photoz error)');
    plt.hist(allsystematics['ztrue'], bins=50, alpha=0.3, label='true z');
    plt.axvline(zsrc_min, color='red', label='requested zmin')
    plt.xlabel('Source Redshift')
    plt.legend()




.. parsed-literal::

    <matplotlib.legend.Legend at 0x7fde26cf45b0>




.. image:: demo_generate_mock_cluster_files/demo_generate_mock_cluster_32_1.png


.. code:: ipython3

    # pdz for one of the galaxy in the catalog, 
    galid = 0
    plt.plot(allsystematics['pzbins'][galid], allsystematics['pzpdf'][galid])
    plt.axvline(allsystematics['z'][galid], label='Observed z', color='red')
    plt.axvline(allsystematics['ztrue'][galid], label='True z', color='g')
    plt.xlabel('Redshift')
    plt.ylabel('Photo-z Probability Distribution')
    plt.legend(loc=1)




.. parsed-literal::

    <matplotlib.legend.Legend at 0x7fde26c32550>




.. image:: demo_generate_mock_cluster_files/demo_generate_mock_cluster_33_1.png


Populate in a galaxy cluster object

.. code:: ipython3

    # At the moment mock data only allow for a cluster centred on (0,0)
    cluster_ra = 0.0
    cluster_dec = 0.0
    gc_object = clmm.GalaxyCluster(cluster_id, cluster_ra, cluster_dec, 
                                   cluster_z, allsystematics)

Plot source galaxy ellipticities

.. code:: ipython3

    plt.scatter(gc_object.galcat['e1'],gc_object.galcat['e2'])
    
    plt.xlim(-0.2, 0.2)
    plt.ylim(-0.2, 0.2)
    plt.xlabel('Ellipticity 1',fontsize='x-large')
    plt.ylabel('Ellipticity 2',fontsize='x-large')




.. parsed-literal::

    Text(0, 0.5, 'Ellipticity 2')




.. image:: demo_generate_mock_cluster_files/demo_generate_mock_cluster_37_1.png


Generate the mock data catalog with different field-of-view options
-------------------------------------------------------------------

In the examples above, ``ngals=1000`` galaxies were simulated in a field
corresponding to a 8 Mpc/h x 8 Mpc/h (proper distance) square box at the
cluster redshift (this is the default). The user may however vary the
field size and/or provide a galaxy density (instead of a number of
galaxies). This is examplified below, using the ``allsystematics``
example.

-  ``ngals = 1000`` in a 4 x 4 Mpc/h box. Asking for the same number of
   galaxies in a smaller field of view yields high galaxy density

.. code:: ipython3

    allsystematics2 = mock.generate_galaxy_catalog(cluster_m, cluster_z, concentration, cosmo, 
                                                   'chang13', zsrc_min=zsrc_min, zsrc_max=7.0, 
                                                   shapenoise=0.05, photoz_sigma_unscaled=0.05,
                                                   field_size=4, ngals=ngals)


.. parsed-literal::

    /home/aguena/.local/lib/python3.9/site-packages/clmm-0.8.0-py3.9.egg/clmm/cosmology/cluster_toolkit.py:69: UserWarning: Some source redshifts are lower than the cluster redshift. Returning Sigma_crit = np.inf for those galaxies.
    /home/aguena/.local/lib/python3.9/site-packages/clmm-0.8.0-py3.9.egg/clmm/cosmology/cluster_toolkit.py:79: RuntimeWarning: divide by zero encountered in true_divide
    /home/aguena/.local/lib/python3.9/site-packages/clmm-0.8.0-py3.9.egg/clmm/theory/func_layer.py:354: UserWarning: Some source redshifts are lower than the cluster redshift. kappa = 0 for those galaxies.


.. code:: ipython3

    plt.scatter(allsystematics['ra'],allsystematics['dec'], marker='.', label = 'default 8 x 8 Mpc/h FoV')
    plt.scatter(allsystematics2['ra'],allsystematics2['dec'],marker='.', label = 'user-defined FoV')
    plt.legend()




.. parsed-literal::

    <matplotlib.legend.Legend at 0x7fde26ae9a90>




.. image:: demo_generate_mock_cluster_files/demo_generate_mock_cluster_42_1.png


-  Alternatively, the user may provide a galaxy density (here 1
   gal/arcmin2 to roughly match 1000 galaxies, given the configuration)
   and the number of galaxies to draw will automatically be adjusted to
   the box size.

.. code:: ipython3

    allsystematics3 = mock.generate_galaxy_catalog(cluster_m, cluster_z, concentration, cosmo, 
                                                   'chang13', zsrc_min=zsrc_min, zsrc_max=7.0, 
                                                  shapenoise=0.05, photoz_sigma_unscaled=0.05, 
                                                  ngal_density=1)
    print(f'Number of drawn galaxies = {len(allsystematics3)}')


.. parsed-literal::

    Number of drawn galaxies = 760


.. parsed-literal::

    /home/aguena/.local/lib/python3.9/site-packages/clmm-0.8.0-py3.9.egg/clmm/cosmology/cluster_toolkit.py:69: UserWarning: Some source redshifts are lower than the cluster redshift. Returning Sigma_crit = np.inf for those galaxies.
    /home/aguena/.local/lib/python3.9/site-packages/clmm-0.8.0-py3.9.egg/clmm/cosmology/cluster_toolkit.py:79: RuntimeWarning: divide by zero encountered in true_divide
    /home/aguena/.local/lib/python3.9/site-packages/clmm-0.8.0-py3.9.egg/clmm/theory/func_layer.py:354: UserWarning: Some source redshifts are lower than the cluster redshift. kappa = 0 for those galaxies.


.. code:: ipython3

    plt.scatter(allsystematics['ra'],allsystematics['dec'], marker='.', label = 'ngals = 1000')
    plt.scatter(allsystematics3['ra'],allsystematics3['dec'],marker='.', label = 'ngal_density = 1 gal / arcmin2')
    plt.legend()




.. parsed-literal::

    <matplotlib.legend.Legend at 0x7fde26a744c0>




.. image:: demo_generate_mock_cluster_files/demo_generate_mock_cluster_45_1.png


Generate mock data with different galaxy cluster options
--------------------------------------------------------

WARNING: Available options depend on the modeling backend: -
Cluster-toolkit allows for other values of the overdensity parameter,
but is retricted to working with the mean mass definition - Both CCL and
Numcosmo allow for different values of the overdensity parameter, but
work with both the mean and critical mass definition - Numcosmo further
allows for the Einasto or Burkert density profiles to be used instead of
the NFW profile

Changing the overdensity parameter (all backend) - ``Delta_SO`` keyword (default = 200)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: ipython3

    allsystematics_500mean = mock.generate_galaxy_catalog(
        cluster_m, cluster_z, concentration, cosmo, 'chang13', Delta_SO=500,
        zsrc_min=zsrc_min,
        zsrc_max=7.0, shapenoise=0.05, photoz_sigma_unscaled=0.05, ngals=ngals)


.. parsed-literal::

    /home/aguena/.local/lib/python3.9/site-packages/clmm-0.8.0-py3.9.egg/clmm/cosmology/cluster_toolkit.py:69: UserWarning: Some source redshifts are lower than the cluster redshift. Returning Sigma_crit = np.inf for those galaxies.
    /home/aguena/.local/lib/python3.9/site-packages/clmm-0.8.0-py3.9.egg/clmm/cosmology/cluster_toolkit.py:79: RuntimeWarning: divide by zero encountered in true_divide
    /home/aguena/.local/lib/python3.9/site-packages/clmm-0.8.0-py3.9.egg/clmm/theory/func_layer.py:354: UserWarning: Some source redshifts are lower than the cluster redshift. kappa = 0 for those galaxies.


Using the critical mass definition (Numcosmo and CCL only) - ``massdef`` keyword (default = ‘mean’)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

WARNING: error will be raised if using the cluster-toolkit backend

.. code:: ipython3

    allsystematics_200critical = mock.generate_galaxy_catalog(
        cluster_m, cluster_z, concentration, cosmo,'chang13',  massdef='critical', zsrc_min=zsrc_min,
        zsrc_max=7.0, shapenoise=0.05, photoz_sigma_unscaled=0.05, ngals=ngals)


::


    ---------------------------------------------------------------------------

    ValueError                                Traceback (most recent call last)

    <ipython-input-25-0c945f55d872> in <module>
    ----> 1 allsystematics_200critical = mock.generate_galaxy_catalog(
          2     cluster_m, cluster_z, concentration, cosmo,'chang13',  massdef='critical', zsrc_min=zsrc_min,
          3     zsrc_max=7.0, shapenoise=0.05, photoz_sigma_unscaled=0.05, ngals=ngals)


    ~/.local/lib/python3.9/site-packages/clmm-0.8.0-py3.9.egg/clmm/support/mock_data.py in generate_galaxy_catalog(cluster_m, cluster_z, cluster_c, cosmo, zsrc, Delta_SO, massdef, halo_profile_model, zsrc_min, zsrc_max, field_size, shapenoise, photoz_sigma_unscaled, nretry, ngals, ngal_density)
        134         ngals = _compute_ngals(ngal_density, field_size, cosmo, cluster_z, zsrc, zsrc_min=zsrc_min, zsrc_max=zsrc_max)
        135 
    --> 136     galaxy_catalog = _generate_galaxy_catalog(ngals=ngals, **params)
        137     # Check for bad galaxies and replace them
        138     for i in range(nretry):


    ~/.local/lib/python3.9/site-packages/clmm-0.8.0-py3.9.egg/clmm/support/mock_data.py in _generate_galaxy_catalog(cluster_m, cluster_z, cluster_c, cosmo, ngals, zsrc, Delta_SO, massdef, halo_profile_model, zsrc_min, zsrc_max, shapenoise, photoz_sigma_unscaled, field_size)
        211     galaxy_catalog = _draw_galaxy_positions(galaxy_catalog, ngals, cluster_z, cosmo, field_size)
        212     # Compute the shear on each source galaxy
    --> 213     gamt = predict_tangential_shear(galaxy_catalog['r_mpc'], mdelta=cluster_m,
        214                                             cdelta=cluster_c, z_cluster=cluster_z,
        215                                             z_source=galaxy_catalog['ztrue'], cosmo=cosmo,


    ~/.local/lib/python3.9/site-packages/clmm-0.8.0-py3.9.egg/clmm/theory/func_layer.py in predict_tangential_shear(r_proj, mdelta, cdelta, z_cluster, z_source, cosmo, delta_mdef, halo_profile_model, massdef, z_src_model)
        261 
        262         gcm.set_cosmo(cosmo)
    --> 263         gcm.set_halo_density_profile(halo_profile_model=halo_profile_model, massdef=massdef, delta_mdef=delta_mdef)
        264         gcm.set_concentration(cdelta)
        265         gcm.set_mass(mdelta)


    ~/.local/lib/python3.9/site-packages/clmm-0.8.0-py3.9.egg/clmm/theory/cluster_toolkit.py in set_halo_density_profile(self, halo_profile_model, massdef, delta_mdef)
         63     def set_halo_density_profile(self, halo_profile_model='nfw', massdef='mean', delta_mdef=200):
         64         # Check if choices are supported
    ---> 65         self.validate_definitions(massdef, halo_profile_model)
         66         # Update values
         67         self.halo_profile_model = halo_profile_model


    ~/.local/lib/python3.9/site-packages/clmm-0.8.0-py3.9.egg/clmm/theory/parent_class.py in validate_definitions(self, massdef, halo_profile_model)
         42     def validate_definitions(self, massdef, halo_profile_model):
         43         if not massdef in self.mdef_dict:
    ---> 44             raise ValueError(f"Halo density profile mass definition {massdef} not currently supported")
         45         if not halo_profile_model in self.hdpm_dict:
         46             raise ValueError(f"Halo density profile model {halo_profile_model} not currently supported")


    ValueError: Halo density profile mass definition critical not currently supported


Changing the halo density profile (Numcosmo only) - ``halo_profile_model`` keyword (default = ‘nfw’)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

WARNING: error will be raised if using the cluster-toolkit or CCL
backends

.. code:: ipython3

    allsystematics_200m_einasto = mock.generate_galaxy_catalog(
        cluster_m, cluster_z, concentration, cosmo,'chang13', halo_profile_model='einasto', zsrc_min=zsrc_min,
        zsrc_max=7.0, shapenoise=0.05, photoz_sigma_unscaled=0.05, ngals=ngals)
